import os
import shared
import datetime
import asyncio
import matplotlib.pyplot as plt
from time import sleep
from operator import add
import numpy as np
from collections import OrderedDict

analyzing_rates = [500, 250, 50]
yticks_list = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]


async def run_test(ctx):
    print('running test: {}'.format(os.path.basename(__file__)[:-3]))
    remoteHosts = ['beta', 'gamma']
    srv_params = {}
    quic_clt_params = {}
    tls_clt_params = {}

    print("rate: ", analyzing_rates)

    num_iterations = 30

    iterations = list(range(num_iterations))

    for host in remoteHosts:
        avail = shared.host_alive(ctx, host)

        if not avail:
            raise Exception("Host {} not available".format(host))

    beta_iface_to_alpha = ctx.config['beta']['netem-interfaces-to-alpha']
    beta_iface_to_gamma = ctx.config['beta']['netem-interfaces-to-gamma']
    interfaces = [beta_iface_to_alpha, beta_iface_to_gamma]

    # server
    srv_params['-uc-listen-addr'] = '192.186.23.3'
    srv_params['-port'] = '64321'

    tls_goodput_rate_avg = {}
    quic_goodput_rate_avg = {}

    for rate in analyzing_rates:
        print("\n------ configuring rate to: {} --------".format(rate))

        # this holds the ALL iteration results
        tls_fairness_over_time_per_rate = []
        quic_fairness_over_time_per_rate = []

        delta_t_iterations = []

        clt_bytes = int(shared.calc_clt_bytes(rate * 0.70))
        print("each connection transmits: {} bytes".format(clt_bytes))

        # quic client
        quic_clt_params['-control-addr'] = '192.186.23.3'
        quic_clt_params['-control-protocol'] = 'tcp'
        quic_clt_params['-streams'] = '1'
        quic_clt_params['-addr'] = '192.186.25.2'
        quic_clt_params['-deadline'] = '120'
        quic_clt_params['-buffer-length'] = '1400'
        quic_clt_params['-update-interval'] = '1'
        quic_clt_params['-module'] = "quic-throughput"
        quic_clt_params['-bytes'] = str(clt_bytes)

        # tls client
        tls_clt_params['-control-addr'] = '192.186.23.3'
        tls_clt_params['-control-protocol'] = 'tcp'
        tls_clt_params['-streams'] = '1'
        tls_clt_params['-addr'] = '192.186.25.2'
        tls_clt_params['-deadline'] = '120'
        tls_clt_params['-buffer-length'] = '1400'
        tls_clt_params['-update-interval'] = '1'
        tls_clt_params['-module'] = "tcp-tls-throughput"
        tls_clt_params['-bytes'] = str(clt_bytes)

        for iteration in iterations:
            print("\n Iteration: ", iteration)

            shared.netem_reset(ctx, 'beta', interfaces=interfaces)
            shared.netem_configure(
                ctx, 'beta', interfaces=interfaces, netem_params={
                    'rate': '{}kbit'.format(rate)})

            shared.mapago_reset(ctx, 'gamma')
            shared.prepare_server(ctx, srv_params)

            await asyncio.sleep(5)

            quic_result = []
            tls_result = []

            msmt_failed = True

            msmt_failed_ctr = 0

            while msmt_failed:
                result = await asyncio.gather(shared.rand_aprepare_client(ctx, quic_clt_params), shared.rand_aprepare_client(ctx, tls_clt_params))
                msmt_failed = check_msmt_failed(
                    result[0], result[1], clt_bytes)

                if msmt_failed:
                    msmt_failed_ctr += 1
                    if msmt_failed_ctr >= 5:
                        print("\ntries up! ok skip")
                        break

            offset_iter = calculate_offset_tls_quic(result[0], result[1])
            delta_t_iterations.append(offset_iter)
            print("\nOffsets are: ", delta_t_iterations)

            print("\n\n------------------- Analyzing goodput ------------------- ")

            quic_fairness_over_time_iter = analyze_data_smoothing(result[0])
            tls_fairness_over_time_iter = analyze_data_smoothing(result[1])

            print("\n\n------------------- Append to total result ------------------- ")

            quic_fairness_over_time_per_rate.append(
                quic_fairness_over_time_iter)
            tls_fairness_over_time_per_rate.append(tls_fairness_over_time_iter)

        print(
            "\n\n------------------- Results for Rate: {}------------------- ".format(rate))

        quic_fairness_over_time_per_rate_normalized = quic_remove_oscillation_and_double_values(
            quic_fairness_over_time_per_rate, rate)

        name = os.path.basename(__file__)[:-3] + "Normalized" + str(rate)
        shared.save_raw_data(name, quic_fairness_over_time_per_rate_normalized)

        print("\n quic normalized and sanitzed values: ",
              quic_fairness_over_time_per_rate_normalized)

        tls_fairness_over_time_per_rate_normalized = tls_remove_oscillation_and_double_values(
            tls_fairness_over_time_per_rate, rate)

        name = os.path.basename(__file__)[:-3] + "Normalized" + str(rate)
        shared.save_raw_data(name, tls_fairness_over_time_per_rate_normalized)

        print("\n tls normalized and sanitzed values: ",
              tls_fairness_over_time_per_rate_normalized)

        print("\n\n------------------- Evaluate Fairness for Rate: {}------------------- ".format(rate))

        evaluate_fairness(quic_fairness_over_time_per_rate_normalized,
                          tls_fairness_over_time_per_rate_normalized, rate)

        print("\n\n------------------- Plot: Iteration results for specific rate ------------------- ")
        plot_iteration_result(quic_fairness_over_time_per_rate_normalized,
                              tls_fairness_over_time_per_rate_normalized, delta_t_iterations)

        print("\n\n------------------- Merge: QUIC results ------------------- ")
        quic_goodput_rate_avg[rate] = merge_quic_iters(
            quic_fairness_over_time_per_rate_normalized, rate)
        print("\n\nQuic goodput average: ", quic_goodput_rate_avg)

        print("\n\n------------------- Merge: TLS results ------------------- ")
        # ok here must be an error
        tls_goodput_rate_avg[rate] = merge_tls_iters(
            tls_fairness_over_time_per_rate_normalized, rate)
        print("\n\nTLS goodput average: ", tls_goodput_rate_avg)

    print("\n\n------------------- Plot: Total Results ------------------- ")

    name = os.path.basename(__file__)[:-3] + "FinishedTlsResults"
    shared.save_raw_data(name, (rate, tls_goodput_rate_avg))

    name = os.path.basename(__file__)[:-3] + "FinishedQuicResults"
    shared.save_raw_data(name, (rate, quic_goodput_rate_avg))

    '''
       QUIC thesis results:
       - These results were obtained in the context of the measurement
       - Used this lines for verifying the result

       quic_500_x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260]
       quic_500_y = [[0.924], [0.9391428571428572], [0.9015999999999998], [0.6316999999999999], [0.6761000000000001], [0.6492857142857141], [0.6325000000000001], [0.6609230769230768], [0.632], [0.5970999999999999], [0.6219], [0.6459999999999998], [0.6213846153846153], [0.627], [0.5371428571428571], [0.6056999999999999], [0.6209333333333333], [0.6378461538461538], [0.6298181818181817], [0.6356363636363636], [0.6180000000000001], [0.5258333333333333], [0.5832999999999999], [0.5989], [0.6081333333333332], [0.6226153846153846], [0.626], [0.718], [0.6756], [0.5801999999999999], [0.612], [0.5874545454545455], [0.5136000000000001], [0.5238333333333333], [0.577076923076923], [0.5761176470588235], [0.5794285714285714], [0.5860000000000001], [0.5932307692307692], [0.6241666666666669], [0.6615555555555556], [0.6584], [0.6107142857142858], [0.6084615384615384], [0.6250666666666667], [0.6314666666666665], [0.6128571428571429], [0.584], [0.5892499999999998], [0.5983999999999999], [0.605], [0.6002857142857143], [0.6245714285714286], [0.6276666666666667], [0.652], [0.6399999999999999], [0.6308333333333334], [0.6143076923076923], [0.6346153846153846], [0.6215384615384616], [0.6344615384615385], [0.6235384615384615], [0.6017142857142856], [0.5835384615384616], [0.6025333333333333], [0.5965333333333332], [0.608], [0.6126153846153847], [0.6025714285714285], [0.6348], [0.6384000000000001], [0.6674285714285714], [0.6415555555555557], [0.6276363636363637], [0.6551428571428571], [0.62325], [0.6164444444444445], [0.6262000000000001], [0.6280000000000001], [0.6248888888888889], [0.6029090909090908], [0.598], [0.6135], [0.6221818181818181], [0.5994285714285715], [0.5970000000000001], [0.6005], [0.6043333333333333], [0.606909090909091], [0.5983636363636364], [0.5826666666666666], [0.5868333333333332], [0.590923076923077], [0.5926666666666667], [0.5912307692307692], [0.5801818181818184], [0.5870769230769232], [0.5903076923076923], [0.6132307692307692], [0.58], [0.5846153846153846], [0.5972857142857143], [0.6032857142857144], [0.6086153846153846], [0.606], [0.6035384615384616], [0.6218333333333333], [0.6015], [0.5978461538461538], [0.6007692307692307], [0.6046666666666667], [0.5928333333333333], [0.5956666666666667], [0.5985454545454547], [0.600909090909091], [0.6216], [0.6273333333333334], [0.6248], [0.5986153846153847], [0.635090909090909], [0.6471111111111111], [0.6491111111111111], [0.6513333333333332], [0.66275], [0.6564444444444444], [0.6582222222222222], [0.6441818181818182], [0.6223636363636363], [0.6052000000000002], [0.5818000000000001], [0.5698181818181818], [0.5906], [0.5660000000000001], [0.5650909090909091], [0.5678181818181819], [0.5703636363636363], [0.5647272727272727], [0.5672727272727273], [0.5783999999999999], [0.5808000000000001], [0.5705454545454546], [0.585], [0.5871999999999999], [0.5750909090909091], [0.5772727272727273], [0.5789090909090909], [0.5943636363636362], [0.5761666666666665], [0.5778333333333334], [0.5750909090909091], [0.55], [0.5517142857142857], [0.5626666666666666], [0.5641428571428573], [0.5807692307692308], [0.592923076923077], [0.6050000000000001], [0.6216363636363637], [0.5907142857142859], [0.6030769230769232], [0.594], [0.6232727272727273], [0.6041818181818182], [0.6737777777777778], [0.6753333333333332], [0.6775], [0.6534000000000001], [0.6552], [0.6564], [0.6478181818181817], [0.621090909090909], [0.6266666666666666], [0.6216363636363637], [0.6275000000000001], [0.5981818181818181], [0.6172], [0.6182], [0.6202000000000001], [0.6134000000000001], [0.5918181818181819], [0.6078181818181818], [0.5943636363636364], [0.6142000000000001], [0.600909090909091], [0.5936000000000001], [0.594], [0.6081818181818182], [0.6130000000000001], [0.6505], [0.6622857142857143], [0.6639999999999999], [0.6651428571428571], [0.635], [0.6589999999999999], [0.6603333333333333], [0.6613333333333333], [0.6317142857142857], [0.6255], [0.62675], [0.6293999999999998], [0.6139999999999999], [0.6317999999999999], [0.633], [0.6440000000000001], [0.6448000000000002], [0.6212000000000001], [0.6258181818181818], [0.634], [0.629090909090909], [0.6305454545454545], [0.6316363636363636], [0.6256666666666666], [0.6398181818181817], [0.643090909090909], [0.646], [0.647], [0.67], [0.6713333333333334], [0.6722222222222222], [0.6571999999999999], [0.6742222222222223], [0.6757777777777778], [0.6766666666666665], [0.6504000000000001], [0.652], [0.653], [0.6511111111111112], [0.6517777777777778], [0.6376000000000001], [0.6237777777777778], [0.6212], [0.6085454545454545], [0.6096363636363636], [0.611], [0.6113999999999999], [0.6121999999999999], [0.6129999999999999], [0.6139999999999999], [0.6152], [0.6157999999999999], [0.6154545454545455], [0.6196], [0.6517499999999999], [0.6525], [0.6264444444444446], [0.6272], [0.6281999999999999], [0.6276363636363637], [0.6283636363636365], [0.6294545454545455], [0.6167272727272727], [0.618], [0.605], [0.6124999999999999], [0.6136666666666666], [0.6143636363636363], [0.6154545454545455], [0.6290000000000001], [0.63], [0.6304444444444445]]

       tls_500_x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260]
       tls_500_y = [[0.8934285714285715], [0.7163999999999999], [0.6682857142857143], [0.5023333333333334], [0.5071111111111111], [0.4399999999999999], [0.3349090909090909], [0.41270000000000007], [0.4038666666666666], [0.25766666666666665], [0.33399999999999996], [0.38160000000000005], [0.3705333333333333], [0.37046153846153845], [0.24966666666666668], [0.29672727272727273], [0.4005714285714285], [0.33814285714285713], [0.37300000000000005], [0.4582222222222223], [0.3538461538461538], [0.3535], [0.24366666666666667], [0.352], [0.30300000000000005], [0.3925714285714285], [0.3358461538461539], [0.4206153846153846], [0.35566666666666663], [0.4408571428571429], [0.36225000000000007], [0.4715999999999999], [0.36257142857142854], [0.242], [0.3188], [0.306], [0.3522857142857143], [0.37542857142857144], [0.37244444444444447], [0.3566666666666667], [0.3985], [0.4114285714285714], [0.329], [0.39039999999999997], [0.461], [0.358], [0.347], [0.33044444444444443], [0.25433333333333336], [0.29379999999999995], [0.31400000000000006], [0.3454545454545454], [0.3662], [0.3527272727272727], [0.3792727272727273], [0.37500000000000006], [0.38075], [0.42028571428571426], [0.4015], [0.3715555555555556], [0.35419999999999996], [0.3705454545454545], [0.3188888888888889], [0.3283333333333333], [0.3425714285714286], [0.34724999999999995], [0.37266666666666665], [0.39272727272727276], [0.38483333333333336], [0.39], [0.38760000000000006], [0.3954], [0.38309090909090915], [0.375], [0.37242857142857144], [0.40380000000000005], [0.40745454545454546], [0.4058333333333333], [0.4149999999999999], [0.3956363636363637], [0.3972727272727273], [0.4015], [0.44000000000000006], [0.46349999999999997], [0.44125], [0.44625], [0.42], [0.3793333333333333], [0.3844444444444444], [0.3897777777777778], [0.38450000000000006], [0.4005], [0.38275], [0.3605454545454546], [0.41019999999999995], [0.4115], [0.41600000000000004], [0.3874000000000001], [0.39], [0.39633333333333337], [0.404], [0.449], [0.4371428571428571], [0.4736666666666666], [0.47766666666666663], [0.458], [0.46033333333333326], [0.47519999999999996], [0.4382857142857143], [0.40885714285714286], [0.3897777777777778], [0.367], [0.36981818181818177], [0.4384], [0.4335555555555556], [0.4314], [0.41690909090909095], [0.41345454545454546], [0.43760000000000004], [0.42200000000000004], [0.44560000000000005], [0.4289090909090909], [0.4668888888888889], [0.44939999999999997], [0.44345454545454555], [0.4853333333333334], [0.48866666666666664], [0.47111111111111126], [0.4466666666666667], [0.4615], [0.42288888888888887], [0.42600000000000005], [0.47100000000000003], [0.4583333333333333], [0.48], [0.4296666666666667], [0.4720000000000001], [0.47000000000000003], [0.42285714285714293], [0.44966666666666666], [0.4526666666666666], [0.38599999999999995], [0.39828571428571424], [0.36560000000000004], [0.3737142857142857], [0.432], [0.4346666666666667], [0.386], [0.3877142857142858], [0.33171428571428574], [0.4452], [0.44880000000000003], [0.38885714285714285], [0.43520000000000003], [0.4123333333333334], [0.414], [0.41657142857142865], [0.4317142857142858], [0.43500000000000005], [0.4453333333333333], [0.447], [0.4508571428571429], [0.42725], [0.42974999999999997], [0.43288888888888893], [0.45575000000000004], [0.45849999999999996], [0.4044], [0.46375], [0.46675], [0.442], [0.44571428571428573], [0.4766666666666666], [0.4202857142857143], [0.41200000000000003], [0.41475], [0.41725], [0.4071999999999999], [0.42519999999999997], [0.4393333333333333], [0.4242], [0.4251111111111111], [0.41500000000000004], [0.4042222222222222], [0.40555555555555556], [0.43475], [0.4351111111111111], [0.4048333333333332], [0.4214545454545455], [0.42799999999999994], [0.3996666666666666], [0.46259999999999996], [0.46499999999999997], [0.44781818181818184], [0.4308333333333334], [0.47711111111111104], [0.47933333333333333], [0.4815555555555555], [0.4530909090909091], [0.4532], [0.45355555555555566], [0.45511111111111113], [0.44800000000000006], [0.45020000000000004], [0.4753333333333333], [0.458], [0.4595], [0.4493333333333333], [0.4320000000000001], [0.46525000000000005], [0.467], [0.4685], [0.4506], [0.4524], [0.45327272727272727], [0.479], [0.481], [0.48340000000000005], [0.4549090909090909], [0.4481818181818182], [0.4498181818181818], [0.49119999999999997], [0.4933333333333334], [0.4948888888888889], [0.47000000000000003], [0.4718000000000001], [0.47379999999999994], [0.48133333333333334], [0.501], [0.50275], [0.5085714285714286], [0.4846666666666667], [0.46060000000000006], [0.44909090909090915], [0.45799999999999996], [0.4596363636363636], [0.43420000000000003], [0.43579999999999997], [0.4378], [0.46222222222222226], [0.43866666666666676], [0.4598181818181818], [0.4614545454545454], [0.4866666666666668], [0.464], [0.4654545454545454], [0.5084000000000001], [0.5348888888888889], [0.5364444444444444], [0.5382222222222222], [0.5393333333333333], [0.49711111111111106], [0.5264444444444445], [0.528], [0.5297777777777779], [0.4936363636363637], [0.4952727272727273], [0.43516666666666665], [0.5277777777777778]]

       quic_250_x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 316, 317, 318]
       quic_250_y = [[0.9204444444444445], [0.912], [0.7573333333333334], [0.7816000000000002], [0.7954285714285714], [0.8813333333333334], [0.8582222222222222], [0.7128], [0.7282666666666667], [0.7342857142857142], [0.7563076923076922], [0.8293333333333334], [0.8046666666666668], [0.8109999999999999], [0.6843076923076924], [0.6969230769230769], [0.6959999999999998], [0.7095384615384616], [0.6911428571428571], [0.7098181818181817], [0.7058181818181818], [0.7788571428571428], [0.7819999999999999], [0.7275555555555555], [0.7488888888888889], [0.7546666666666666], [0.6535384615384614], [0.6486666666666667], [0.6363636363636364], [0.6647272727272727], [0.6643333333333333], [0.6574545454545455], [0.6654545454545455], [0.6862222222222223], [0.6885714285714286], [0.7102222222222222], [0.6738181818181819], [0.6781818181818182], [0.6772], [0.6866666666666666], [0.6872727272727274], [0.6827692307692307], [0.7098461538461538], [0.690153846153846], [0.6853333333333333], [0.7087272727272725], [0.7133333333333334], [0.7169999999999997], [0.7368888888888888], [0.734], [0.7374999999999999], [0.7214999999999999], [0.7494999999999999], [0.7485], [0.7097142857142856], [0.6808888888888889], [0.6527999999999999], [0.724], [0.737], [0.742], [0.7243636363636363], [0.7295999999999999], [0.7378181818181818], [0.7156666666666666], [0.7186666666666669], [0.7225454545454546], [0.6936], [0.6956], [0.6861818181818183], [0.6866666666666666], [0.6909090909090909], [0.7003636363636363], [0.6897777777777778], [0.7208888888888889], [0.7239999999999999], [0.7302222222222222], [0.7375], [0.742], [0.7615999999999999], [0.7342857142857142], [0.7235], [0.6884], [0.6792727272727274], [0.6839999999999999], [0.6646666666666666], [0.6663333333333333], [0.6627692307692308], [0.6529230769230769], [0.6573333333333332], [0.6653333333333334], [0.6669999999999999], [0.6971999999999999], [0.6952], [0.704], [0.759], [0.7857142857142856], [0.7293333333333334], [0.72], [0.7127272727272728], [0.7156666666666666], [0.7173333333333333], [0.7218181818181818], [0.7143333333333333], [0.6876923076923076], [0.6898461538461539], [0.6978461538461538], [0.6993846153846154], [0.7012307692307692], [0.6952727272727274], [0.703], [0.7111999999999999], [0.7136], [0.722], [0.7368888888888888], [0.748], [0.6995555555555556], [0.6967272727272728], [0.6978181818181818], [0.7007272727272726], [0.6633333333333332], [0.6603636363636363], [0.6786666666666666], [0.6767272727272727], [0.6698461538461539], [0.6707692307692307], [0.6726153846153846], [0.6744615384615386], [0.6753846153846155], [0.6829999999999998], [0.6775384615384614], [0.6796923076923077], [0.6806153846153846], [0.7069090909090908], [0.6778181818181819], [0.6803636363636364], [0.6818181818181819], [0.6896], [0.6904], [0.6920000000000001], [0.6932000000000001], [0.6956], [0.7053333333333334], [0.7005], [0.6805714285714286], [0.6733333333333333], [0.6699999999999999], [0.6923636363636363], [0.6956363636363636], [0.6839999999999999], [0.6859999999999999], [0.6985454545454545], [0.7007272727272728], [0.7036], [0.691], [0.6926666666666667], [0.694], [0.695], [0.6963333333333334], [0.6976666666666667], [0.699], [0.6996666666666668], [0.7016666666666668], [0.7145454545454546], [0.7080000000000001], [0.7], [0.7094545454545454], [0.7138181818181818], [0.7156666666666666], [0.7421818181818182], [0.7294545454545454], [0.7309090909090908], [0.7476], [0.7488], [0.75], [0.7330909090909089], [0.752], [0.752], [0.7341818181818183], [0.7352727272727274], [0.736], [0.7276666666666668], [0.7163636363636363], [0.7083636363636364], [0.7287999999999999], [0.7292], [0.7296], [0.7546666666666666], [0.725], [0.7098461538461538], [0.7104000000000001], [0.6927272727272729], [0.712], [0.6938181818181819], [0.6960000000000001], [0.6788000000000001], [0.6792], [0.6804000000000001], [0.6635555555555556], [0.65], [0.6505000000000001], [0.6605714285714285], [0.6617142857142857], [0.6353333333333334], [0.5946666666666668], [0.5980000000000001], [0.6577142857142857], [0.642], [0.6194285714285714], [0.6006666666666667], [0.6013333333333334], [0.6046666666666667], [0.6046666666666667], [0.6073333333333334], [0.5976000000000001], [0.5853333333333334], [0.5873333333333334], [0.5846666666666668], [0.5860000000000001], [0.588], [0.603], [0.605], [0.6096], [0.6112], [0.612], [0.6133333333333334], [0.614], [0.6153333333333334], [0.6017142857142856], [0.618], [0.6186666666666667], [0.6193333333333334], [0.622], [0.6426666666666667], [0.6426666666666667], [0.6446666666666666], [0.6466666666666666], [0.6466666666666666], [0.636], [0.6213333333333334], [0.6272], [0.624], [0.6013333333333334], [0.628], [0.5980000000000001], [0.5980000000000001], [0.5946666666666668], [0.5960000000000001], [0.5973333333333334], [0.6050000000000001], [0.6050000000000001], [0.6070000000000001], [0.6080000000000001], [0.6090000000000001], [0.5933333333333334], [0.5730000000000001], [0.5960000000000001], [0.5973333333333333], [0.5986666666666666], [0.5986666666666666], [0.574], [0.585], [0.586], [0.5786666666666667], [0.58], [0.58], [0.552], [0.552], [0.556], [0.522], [0.524], [0.524], [0.524], [0.528], [0.528], [0.528], [0.552], [0.5546666666666668], [0.548], [0.56], [0.56], [0.528], [0.532], [0.542], [0.542], [0.544], [0.546], [0.546], [0.548], [0.55], [0.55], [0.552], [0.552], [0.544], [0.548], [0.548], [0.548], [0.548], [0.552], [0.552], [0.552], [0.54], [0.524], [0.524], [0.524]]

       tls_250_x = [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404]
       tls_250_y = [[0.9133333333333334], [0.8605714285714287], [0.6195999999999999], [0.5233333333333333], [0.122], [0.4332], [0.39866666666666667], [0.21], [0.20628571428571427], [0.38755555555555554], [0.4625], [0.152], [0.18666666666666665], [0.16499999999999998], [0.2095], [0.3542222222222222], [0.397], [0.44857142857142857], [0.408], [0.152], [0.18], [0.152], [0.256], [0.225], [0.35333333333333333], [0.33955555555555555], [0.3645], [0.3542222222222222], [0.3535], [0.3925714285714286], [0.178], [0.334], [0.2906666666666667], [0.248], [0.2826666666666667], [0.24133333333333332], [0.28300000000000003], [0.3032], [0.37279999999999996], [0.3453333333333333], [0.362], [0.32239999999999996], [0.36799999999999994], [0.308], [0.306], [0.314], [0.317], [0.32], [0.24666666666666667], [0.2906666666666667], [0.36], [0.37], [0.38], [0.31733333333333336], [0.315], [0.3456], [0.44], [0.4328], [0.3413333333333333], [0.358], [0.363], [0.32466666666666666], [0.3605714285714286], [0.34914285714285714], [0.39000000000000007], [0.34600000000000003], [0.35333333333333333], [0.4], [0.3976], [0.44899999999999995], [0.44799999999999995], [0.46], [0.30600000000000005], [0.28959999999999997], [0.332], [0.34], [0.37679999999999997], [0.40599999999999997], [0.48666666666666664], [0.451], [0.29942857142857143], [0.26680000000000004], [0.2573333333333333], [0.2992], [0.33279999999999993], [0.408], [0.414], [0.34700000000000003], [0.25], [0.369], [0.37600000000000006], [0.3786666666666667], [0.41800000000000004], [0.364], [0.32899999999999996], [0.39599999999999996], [0.3824], [0.386], [0.393], [0.36399999999999993], [0.3773333333333333], [0.38266666666666665], [0.33], [0.352], [0.296], [0.3016], [0.284], [0.328], [0.33866666666666667], [0.37600000000000006], [0.39866666666666667], [0.3026666666666667], [0.29300000000000004], [0.38666666666666666], [0.3423999999999999], [0.42], [0.352], [0.436], [0.353], [0.33999999999999997], [0.346], [0.386], [0.39], [0.452], [0.456], [0.326], [0.33], [0.204], [0.18666666666666665], [0.3453333333333333], [0.34800000000000003], [0.3344], [0.3384], [0.347], [0.3053333333333333], [0.254], [0.26], [0.22000000000000003], [0.21700000000000003], [0.2773333333333334], [0.2813333333333334], [0.27799999999999997], [0.282], [0.286], [0.24399999999999997], [0.283], [0.3053333333333333], [0.33999999999999997], [0.23399999999999999], [0.216], [0.20199999999999999], [0.17333333333333334], [0.356], [0.356], [0.188], [0.196], [0.278], [0.27799999999999997], [0.24666666666666667], [0.295], [0.298], [0.304], [0.2504], [0.311], [0.315], [0.318], [0.3253333333333333], [0.24], [0.244], [0.226], [0.218], [0.26799999999999996], [0.27066666666666667], [0.2733333333333333], [0.252], [0.22533333333333336], [0.22799999999999998], [0.302], [0.306], [0.31], [0.21466666666666664], [0.237], [0.22399999999999998], [0.128], [0.132], [0.18000000000000002], [0.15800000000000003], [0.18800000000000003], [0.16799999999999998], [0.172], [0.174], [0.14], [0.2112], [0.1965714285714286], [0.1977777777777778], [0.1945], [0.22800000000000006], [0.2204], [0.23200000000000004], [0.21650000000000003], [0.18628571428571433], [0.21085714285714285], [0.22711111111111112], [0.22150000000000003], [0.17533333333333334], [0.17733333333333334], [0.18066666666666667], [0.18400000000000002], [0.18800000000000003], [0.19200000000000003], [0.2008], [0.2048], [0.21999999999999997], [0.22399999999999998], [0.19942857142857143], [0.20285714285714285], [0.20514285714285713], [0.22949999999999995], [0.19257142857142856], [0.19542857142857142], [0.2165], [0.1942857142857143], [0.1965714285714286], [0.2065], [0.209], [0.2125], [0.19199999999999998], [0.19485714285714284], [0.19714285714285712], [0.19999999999999998], [0.2155], [0.21799999999999997], [0.22249999999999998], [0.22599999999999998], [0.22933333333333333], [0.22533333333333333], [0.228], [0.23080000000000003], [0.23440000000000003], [0.25054545454545457], [0.2538181818181818], [0.2570909090909091], [0.24359999999999998], [0.24720000000000003], [0.25040000000000007], [0.24711111111111114], [0.2502222222222222], [0.25333333333333335], [0.2551111111111111], [0.2582222222222222], [0.2604444444444445], [0.2611428571428572], [0.264], [0.266], [0.26866666666666666], [0.272], [0.2834285714285715], [0.2833333333333333], [0.28400000000000003], [0.28285714285714286], [0.28200000000000003], [0.28400000000000003], [0.29822222222222217], [0.293090909090909], [0.2952727272727272], [0.28355555555555556], [0.2992727272727272], [0.2967272727272727], [0.30299999999999994], [0.3053333333333333], [0.3092], [0.31079999999999997], [0.3217777777777778], [0.3236], [0.3144], [0.31720000000000004], [0.31839999999999996], [0.3181818181818182], [0.3163333333333333], [0.3193333333333333], [0.32599999999999996], [0.3296666666666666], [0.3303333333333333], [0.3336666666666666], [0.3346666666666666], [0.3399999999999999], [0.34166666666666656], [0.3366153846153845], [0.33846153846153837], [0.34719999999999995], [0.34906666666666664], [0.3502857142857142], [0.3517142857142856], [0.3542857142857142], [0.3557142857142857], [0.358], [0.3594285714285714], [0.3651428571428571], [0.36746666666666666], [0.36906666666666665], [0.37093333333333334], [0.3725333333333333], [0.3751428571428571], [0.37685714285714284], [0.3772307692307692], [0.3883636363636363], [0.39066666666666666], [0.3909090909090909], [0.39272727272727265], [0.39454545454545453], [0.39299999999999996], [0.3873846153846153], [0.3889230769230769], [0.39076923076923076], [0.3923076923076923], [0.39233333333333326], [0.39566666666666667], [0.39633333333333337], [0.39899999999999997], [0.39999999999999997], [0.4023333333333334], [0.4024], [0.4053333333333333], [0.40577777777777774], [0.408], [0.412], [0.41333333333333333], [0.4088], [0.41], [0.4100000000000001], [0.4116666666666667], [0.413], [0.41500000000000004], [0.4166666666666667], [0.41563636363636364], [0.4174545454545454], [0.41533333333333333], [0.42133333333333334], [0.42333333333333334], [0.4246666666666667], [0.42184615384615387], [0.4233846153846154], [0.4246153846153847], [0.4261538461538462], [0.4326666666666667], [0.44100000000000006], [0.4426666666666667], [0.4480000000000001], [0.44866666666666677], [0.4487272727272728], [0.4466666666666667], [0.444], [0.43142857142857144], [0.43314285714285716], [0.4348571428571429], [0.43133333333333335], [0.448], [0.432], [0.408], [0.408], [0.448], [0.4], [0.356], [0.356], [0.4], [0.4], [0.4], [0.404], [0.404], [0.404], [0.408], [0.408], [0.412], [0.412], [0.412], [0.416], [0.42], [0.4093333333333333], [0.41333333333333333], [0.41333333333333333], [0.41333333333333333], [0.41000000000000003], [0.41000000000000003], [0.41000000000000003], [0.41200000000000003], [0.4], [0.4], [0.404], [0.404], [0.404], [0.408], [0.408], [0.412], [0.412], [0.412], [0.412]]

       quic_50_x = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 311, 312]
       quic_50_y = [[0.986896551724138], [0.9600000000000006], [0.9413333333333338], [0.9400000000000003], [0.9266666666666673], [0.9200000000000007], [0.9047619047619051], [0.8962500000000003], [0.8840000000000002], [0.8611111111111114], [0.8611111111111114], [0.8290000000000001], [0.791304347826087], [0.7936363636363637], [0.7407142857142857], [0.7485714285714288], [0.751851851851852], [0.7523076923076926], [0.7561538461538463], [0.7630769230769232], [0.7591304347826089], [0.7789473684210527], [0.7810526315789476], [0.7941176470588237], [0.7900000000000001], [0.7944444444444446], [0.7823529411764708], [0.7300000000000001], [0.7733333333333334], [0.7714285714285715], [0.772857142857143], [0.7263157894736844], [0.7587500000000001], [0.7333333333333334], [0.7150000000000001], [0.7000000000000002], [0.6666666666666669], [0.6708333333333335], [0.6756521739130437], [0.6778571428571432], [0.6871428571428572], [0.6866666666666668], [0.6736363636363636], [0.7241379310344827], [0.7371428571428573], [0.7392592592592594], [0.7446153846153847], [0.7392307692307695], [0.740769230769231], [0.7730434782608697], [0.784], [0.7695238095238095], [0.7745454545454546], [0.7695652173913045], [0.7747826086956522], [0.7650000000000001], [0.771304347826087], [0.7809523809523811], [0.7799999999999999], [0.7518181818181818], [0.7591666666666668], [0.7536363636363638], [0.7418181818181818], [0.7461538461538463], [0.7608000000000003], [0.7608000000000003], [0.7555555555555558], [0.7432000000000002], [0.7584615384615385], [0.7843478260869566], [0.7791304347826088], [0.7900000000000001], [0.7904761904761906], [0.7900000000000003], [0.8000000000000003], [0.8210000000000003], [0.805263157894737], [0.7820000000000001], [0.7910000000000001], [0.7822222222222223], [0.7695238095238095], [0.7628571428571428], [0.7666666666666667], [0.7725], [0.7609090909090912], [0.7591304347826089], [0.7554545454545457], [0.7563636363636366], [0.7418181818181818], [0.7371428571428572], [0.7443478260869567], [0.7390476190476191], [0.7329999999999999], [0.7200000000000002], [0.7282352941176471], [0.7352941176470589], [0.7355555555555555], [0.76], [0.76125], [0.7635294117647059], [0.7647058823529411], [0.7813333333333333], [0.7675000000000001], [0.7694736842105264], [0.7722222222222223], [0.7588235294117647], [0.7644444444444445], [0.7744444444444445], [0.7675000000000001], [0.7611111111111111], [0.7494736842105262], [0.7580952380952382], [0.740952380952381], [0.7410000000000001], [0.740909090909091], [0.7518181818181819], [0.7486956521739131], [0.7345454545454545], [0.7391666666666667], [0.7391304347826086], [0.7408695652173912], [0.7495238095238095], [0.7383333333333334], [0.7283333333333334], [0.7376], [0.7424999999999998], [0.7504], [0.7627272727272726], [0.7723809523809523], [0.7704761904761903], [0.7942857142857142], [0.7999999999999998], [0.788181818181818], [0.7909090909090907], [0.8009523809523807], [0.7936842105263157], [0.7973913043478259], [0.7878260869565217], [0.7982608695652172], [0.7772727272727272], [0.782608695652174], [0.7716666666666666], [0.769090909090909], [0.7833333333333332], [0.7758333333333333], [0.7721739130434784], [0.7753846153846153], [0.7736], [0.7716666666666666], [0.7638095238095237], [0.7695652173913043], [0.7854545454545453], [0.7857142857142857], [0.7866666666666666], [0.7866666666666666], [0.7873684210526315], [0.7879999999999999], [0.7889999999999999], [0.7833333333333332], [0.766], [0.7629999999999999], [0.7619047619047619], [0.7618181818181817], [0.7729999999999999], [0.7729999999999999], [0.7769999999999999], [0.7569999999999999], [0.7768421052631578], [0.7715789473684209], [0.7741176470588236], [0.74], [0.7611111111111111], [0.7610526315789473], [0.7642105263157893], [0.7711111111111111], [0.7577777777777777], [0.7505882352941176], [0.7388235294117647], [0.7352941176470589], [0.75], [0.767142857142857], [0.7533333333333334], [0.7522222222222222], [0.754], [0.755], [0.7514285714285716], [0.7514285714285716], [0.7657142857142858], [0.7745454545454546], [0.7652631578947368], [0.7458823529411764], [0.7388235294117648], [0.7388235294117648], [0.7424999999999999], [0.735], [0.7133333333333333], [0.7266666666666667], [0.7272727272727273], [0.7254545454545455], [0.7142857142857143], [0.7157142857142859], [0.7157142857142859], [0.7], [0.7013333333333335], [0.7013333333333333], [0.6800000000000002], [0.6846153846153846], [0.6866666666666666], [0.6836363636363636], [0.6836363636363636], [0.6716666666666667], [0.6672727272727272], [0.656], [0.6759999999999999], [0.6933333333333332], [0.6666666666666666], [0.6599999999999999], [0.6457142857142857], [0.6457142857142857], [0.6549999999999999], [0.6666666666666666], [0.6666666666666666], [0.6559999999999999], [0.6849999999999999], [0.6849999999999999], [0.6966666666666668], [0.692], [0.692], [0.6633333333333334], [0.6519999999999999], [0.64], [0.62], [0.62], [0.62], [0.62], [0.6533333333333333], [0.6533333333333333], [0.63], [0.63], [0.63], [0.63], [0.63], [0.65], [0.65], [0.65], [0.65], [0.65], [0.65], [0.65], [0.65], [0.64], [0.64], [0.64], [0.64], [0.64], [0.56], [0.48], [0.48], [0.47], [0.47], [0.47], [0.47], [0.47], [0.47], [0.47], [0.47], [0.47], [0.47], [0.47], [0.48], [0.48], [0.49], [0.49], [0.49], [0.49], [0.49], [0.49], [0.49], [0.49], [0.49], [0.49], [0.5], [0.53], [0.53], [0.53], [0.53], [0.54], [0.56], [0.54], [0.54], [0.54], [0.54], [0.54], [0.54], [0.54], [0.56], [0.52], [0.52]]

       tls_50_x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 452, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464]
       tls_50_y = [[877602.2], [0.9130434782608701], [0.9161538461538468], [0.85], [0.7977777777777777], [0.84], [0.7844444444444445], [0.734], [0.7420000000000001], [0.82], [0.8], [0.26800000000000007], [0.396], [0.5], [0.49], [0.44499999999999995], [0.43333333333333335], [0.3888888888888889], [0.49714285714285716], [0.43000000000000005], [0.49250000000000005], [0.5125000000000001], [0.47272727272727283], [0.5325], [0.44500000000000006], [0.092], [0.135], [0.18], [0.13999999999999999], [0.18], [0.31599999999999995], [0.30666666666666664], [0.2885714285714286], [0.52], [0.45499999999999996], [0.5933333333333334], [0.38799999999999996], [0.405], [0.47000000000000003], [0.4533333333333333], [0.45999999999999996], [0.5599999999999999], [0.6], [0.48], [0.44], [0.39142857142857146], [0.23600000000000004], [0.38000000000000006], [0.09000000000000001], [0.16], [0.12666666666666668], [0.1], [0.16], [0.16], [0.18], [0.2], [0.41], [0.43], [0.36000000000000004], [0.384], [0.3228571428571429], [0.3914285714285714], [0.3514285714285714], [0.45599999999999996], [0.38], [0.38571428571428573], [0.41600000000000004], [0.30400000000000005], [0.335], [0.42000000000000004], [0.43000000000000005], [0.295], [0.44], [0.325], [0.272], [0.34], [0.2900000000000001], [0.25], [0.26666666666666666], [0.36800000000000005], [0.37000000000000005], [0.47000000000000003], [0.33142857142857146], [0.36999999999999994], [0.36999999999999994], [0.368], [0.4149999999999999], [0.3466666666666667], [0.35333333333333333], [0.33999999999999997], [0.3666666666666667], [0.35], [0.17], [0.2], [0.2], [0.15000000000000002], [0.32], [0.32666666666666666], [0.28], [0.29333333333333333], [0.31], [0.315], [0.35000000000000003], [0.31000000000000005], [0.30500000000000005], [0.375], [0.3266666666666667], [0.36333333333333334], [0.3114285714285714], [0.3171428571428571], [0.3433333333333333], [0.364], [0.37], [0.46], [0.38], [0.388], [0.31666666666666665], [0.37333333333333335], [0.5066666666666667], [0.52], [0.48000000000000004], [0.55], [0.38], [0.4933333333333334], [0.41000000000000003], [0.41000000000000003], [0.41000000000000003], [0.42000000000000004], [0.42500000000000004], [0.4466666666666667], [0.385], [0.328], [0.5133333333333333], [0.32000000000000006], [0.31500000000000006], [0.25], [0.21000000000000002], [0.265], [0.29714285714285715], [0.29714285714285715], [0.392], [0.3866666666666667], [0.395], [0.3866666666666667], [0.39333333333333337], [0.24666666666666667], [0.24000000000000005], [0.24800000000000005], [0.25600000000000006], [0.2166666666666667], [0.16750000000000004], [0.1622222222222222], [0.148], [0.186], [0.17600000000000002], [0.2022222222222222], [0.19777777777777777], [0.17500000000000002], [0.20000000000000004], [0.18545454545454546], [0.19272727272727275], [0.12], [0.11777777777777779], [0.12444444444444445], [0.13111111111111112], [0.16], [0.158], [0.1509090909090909], [0.13166666666666668], [0.13272727272727272], [0.12666666666666668], [0.13454545454545455], [0.2016666666666667], [0.18923076923076926], [0.19571428571428573], [0.18000000000000002], [0.19230769230769235], [0.1938461538461539], [0.18571428571428575], [0.18400000000000005], [0.18800000000000006], [0.20625000000000007], [0.20823529411764713], [0.19750000000000006], [0.20125000000000007], [0.20875000000000007], [0.21600000000000008], [0.22266666666666673], [0.2173333333333334], [0.22533333333333339], [0.2314285714285715], [0.22857142857142865], [0.23230769230769235], [0.23692307692307693], [0.23666666666666666], [0.24857142857142864], [0.2306666666666667], [0.23500000000000001], [0.18875], [0.19200000000000006], [0.19882352941176473], [0.20000000000000004], [0.20249999999999999], [0.21000000000000005], [0.2125], [0.21411764705882352], [0.21066666666666667], [0.21888888888888894], [0.2255555555555556], [0.22999999999999993], [0.2378947368421053], [0.22666666666666668], [0.2136842105263158], [0.23111111111111113], [0.2364705882352941], [0.23499999999999996], [0.23699999999999996], [0.23684210526315785], [0.24], [0.2421052631578947], [0.23888888888888887], [0.22421052631578947], [0.22400000000000003], [0.227], [0.22952380952380957], [0.2372727272727273], [0.2361904761904762], [0.2361904761904762], [0.23904761904761906], [0.24], [0.2457142857142857], [0.244], [0.2504761904761904], [0.254], [0.25], [0.2536842105263158], [0.2571428571428572], [0.2628571428571429], [0.264], [0.26599999999999996], [0.2647619047619048], [0.267], [0.26947368421052625], [0.2779999999999999], [0.2771428571428571], [0.279047619047619], [0.27904761904761904], [0.27904761904761904], [0.27899999999999997], [0.2726315789473684], [0.28285714285714286], [0.2927272727272727], [0.2936363636363637], [0.2973913043478261], [0.30560000000000004], [0.3096000000000001], [0.31090909090909097], [0.31238095238095237], [0.3181818181818182], [0.3236363636363636], [0.3245454545454545], [0.33], [0.33], [0.33272727272727276], [0.331], [0.33565217391304353], [0.33238095238095244], [0.33727272727272734], [0.3352380952380953], [0.340909090909091], [0.3420000000000001], [0.3476190476190477], [0.3400000000000001], [0.3533333333333334], [0.3560000000000001], [0.3610000000000001], [0.35400000000000004], [0.36000000000000004], [0.3570000000000001], [0.356], [0.34444444444444444], [0.36200000000000004], [0.35684210526315796], [0.36631578947368426], [0.3682352941176471], [0.37578947368421056], [0.3633333333333334], [0.368888888888889], [0.3670588235294118], [0.37157894736842106], [0.37600000000000006], [0.38000000000000006], [0.37800000000000006], [0.3845454545454546], [0.38], [0.38181818181818183], [0.38000000000000006], [0.39043478260869574], [0.3878260869565218], [0.38173913043478264], [0.3843478260869566], [0.3752000000000001], [0.38083333333333336], [0.3874074074074075], [0.3853846153846155], [0.3884615384615385], [0.3861538461538462], [0.3904000000000001], [0.3903703703703704], [0.39280000000000004], [0.39777777777777784], [0.3958333333333333], [0.4000000000000001], [0.4000000000000001], [0.40240000000000015], [0.4120000000000001], [0.413846153846154], [0.41130434782608705], [0.41043478260869576], [0.40818181818181826], [0.4147826086956523], [0.4114285714285715], [0.4109999999999999], [0.4011764705882353], [0.40842105263157896], [0.392], [0.40000000000000013], [0.3753846153846154], [0.39375000000000004], [0.3853333333333334], [0.39647058823529424], [0.3866666666666667], [0.3975000000000001], [0.38571428571428573], [0.3866666666666667], [0.3871428571428571], [0.3885714285714286], [0.3830769230769231], [0.39285714285714285], [0.3923076923076923], [0.40153846153846157], [0.39692307692307693], [0.40266666666666673], [0.3971428571428572], [0.4], [0.4000000000000001], [0.4000000000000001], [0.4013333333333334], [0.4], [0.4026666666666667], [0.4014285714285714], [0.4028571428571429], [0.4061538461538462], [0.4114285714285715], [0.4138461538461539], [0.41076923076923083], [0.41846153846153855], [0.41], [0.4127272727272727], [0.41], [0.41000000000000003], [0.41333333333333333], [0.4181818181818182], [0.4127272727272727], [0.41400000000000003], [0.39714285714285713], [0.3666666666666667], [0.38000000000000006], [0.37333333333333335], [0.38000000000000006], [0.37333333333333335], [0.38000000000000006], [0.37333333333333335], [0.36000000000000004], [0.33999999999999997], [0.3666666666666667], [0.33999999999999997], [0.3666666666666667], [0.35], [0.37333333333333335], [0.36], [0.38000000000000006], [0.36], [0.38000000000000006], [0.36], [0.38000000000000006], [0.36], [0.36], [0.36], [0.36], [0.37], [0.37], [0.37], [0.37], [0.37], [0.38], [0.34], [0.34], [0.34], [0.34], [0.34], [0.34], [0.34], [0.34], [0.34], [0.36], [0.36], [0.36], [0.36], [0.36], [0.36], [0.36], [0.36], [0.36], [0.37], [0.37], [0.37], [0.37], [0.37], [0.38], [0.38], [0.38], [0.38], [0.38], [0.38], [0.38], [0.38], [0.38], [0.34], [0.34], [0.34], [0.34], [0.34], [0.34], [0.34], [0.34], [0.34], [0.36], [0.36]]

       # cut quic 250 down
       index = quic_250_x.index(260)
       print("quic index: ", index)

       quic_250_x = quic_250_x[:index+1]
       quic_250_y = quic_250_y[:index+1]

       # cut tls 250 down
       index = tls_250_x.index(260)
       print("tls index: ", index)

       tls_250_x = tls_250_x[:index+1]
       tls_250_y = tls_250_y[:index+1]

       # cut quic 50 down
       index = quic_50_x.index(260)
       print("quic index: ", index)

       quic_50_x = quic_50_x[:index+1]
       quic_50_y = quic_50_y[:index+1]

       # cut tls 50 down
       index = tls_50_x.index(260)
       print("tls index: ", index)

       tls_50_x = tls_50_x[:index+1]
       tls_50_y = tls_50_y[:index+1]

       delete_index_conn = []

       for tls_item in tls_50_y:
           tls_item_val = tls_item[0]
           # print("\ntls item val: ", tls_item_val)

           if tls_item_val >= 1.0:
               index = tls_50_y.index(tls_item)
               print("\n\n\nratio over 1.0:", tls_item_val)
               print("\n deleting index in next step: ", index)
               delete_index_conn.append(index)

       print("delete index: ", delete_index_conn)

       # now delete the stuff or we get inconsistent list
       while len(delete_index_conn) > 0:
           print("\ndeleting index of conn 1 now: ", delete_index_conn)
           delete_index = delete_index_conn.pop(0)
           del tls_50_x[delete_index]
           del tls_50_y[delete_index]

           # decrease all other indices of the list by one or we use wrong index
           delete_index_conn[:] = [index - 1 for index in delete_index_conn]

       #### Add everything ####

       ### QUIC 500

       total_result = []
       total_xaxis_result = []
       total_yaxis_result = []
       total_xaxis_result.append(quic_500_x)
       total_yaxis_result.append(quic_500_y)
       total_result.append(total_xaxis_result)
       total_result.append(total_yaxis_result)

       quic_goodput_rate_avg[500] = total_result

       ### QUIC 250

       total_result = []
       total_xaxis_result = []
       total_yaxis_result = []
       total_xaxis_result.append(quic_250_x)
       total_yaxis_result.append(quic_250_y)
       total_result.append(total_xaxis_result)
       total_result.append(total_yaxis_result)

       quic_goodput_rate_avg[250] = total_result

       ### QUIC 50

       total_result = []
       total_xaxis_result = []
       total_yaxis_result = []
       total_xaxis_result.append(quic_50_x)
       total_yaxis_result.append(quic_50_y)
       total_result.append(total_xaxis_result)
       total_result.append(total_yaxis_result)

       quic_goodput_rate_avg[50] = total_result
       print("\n\n\nquic goodput rate ", quic_goodput_rate_avg)


       #### Add everything ####

       ### tls 500

       total_result = []
       total_xaxis_result = []
       total_yaxis_result = []
       total_xaxis_result.append(tls_500_x)
       total_yaxis_result.append(tls_500_y)
       total_result.append(total_xaxis_result)
       total_result.append(total_yaxis_result)

       tls_goodput_rate_avg[500] = total_result

       ### tls 250

       total_result = []
       total_xaxis_result = []
       total_yaxis_result = []
       total_xaxis_result.append(tls_250_x)
       total_yaxis_result.append(tls_250_y)
       total_result.append(total_xaxis_result)
       total_result.append(total_yaxis_result)

       tls_goodput_rate_avg[250] = total_result

       total_result = []
       total_xaxis_result = []
       total_yaxis_result = []
       total_xaxis_result.append(tls_50_x)
       total_yaxis_result.append(tls_50_y)
       total_result.append(total_xaxis_result)
       total_result.append(total_yaxis_result)

       tls_goodput_rate_avg[50] = total_result

       '''

    plot_data_smoothing_total(quic_goodput_rate_avg, tls_goodput_rate_avg)


def check_msmt_failed(quic_iter_res, tls_iter_res, clt_bytes):
    quic_last = quic_iter_res[-1]
    # quic_last = quic_data[-1]
    # print("\nQUIC last msmt point is: ", quic_last)

    tls_last = tls_iter_res[-1]
    # quic_last = quic_data[-1]
    # print("\nTLS last msmt point is: ", tls_last)

    if int(quic_last[0]['bytes']) < clt_bytes or int(tls_last[0]['bytes']) < clt_bytes:
        print("\n !!!!!msmt failed! try again!!!!!")
        return True
    else:
        print("\n !!!!!msmt ok! go on!!!!!")
        return False


def merge_tls_iters(tls_fairness_over_time_per_rate_normalized, rate):
    tls_conn1_total_results_overall_iters = {}

    # add the x axis of the different iters together
    for tls_iter in tls_fairness_over_time_per_rate_normalized:

        conn1_c = 0

        # conn1: if no entry for current x value exists => create
        # if value exisits: add the corresponding y value
        # if not: just create
        for x_axis_item in tls_iter[0][0]:
            if x_axis_item in tls_conn1_total_results_overall_iters:
                tls_conn1_total_results_overall_iters[x_axis_item] += [
                    tls_iter[1][0][conn1_c]]
            else:
                tls_conn1_total_results_overall_iters[x_axis_item] = [
                    tls_iter[1][0][conn1_c]]

            conn1_c += 1

    # print("\n\n\ntls conn1 not summarized results: ", tls_conn1_total_results_overall_iters)

    # checked until here

    # for the added stuff calculate the sum if necessary
    for key, value in tls_conn1_total_results_overall_iters.items():
        if len(value) > 1:
            denominator = len(value)
            numerator = 0

            for item in value:
                numerator += item

            new_val = numerator / denominator
            # replace old value with new sum
            tls_conn1_total_results_overall_iters[key] = [new_val]

            #print("\nconn1 value is: ", value)
            #print("we have to take sum")

    # long > 240 s tls_conn1_total_results_overall_iters = {1: [0.8934285714285715], 2: [0.7163999999999999], 3: [0.6682857142857143], 4: [0.5023333333333334], 5: [0.5071111111111111], 6: [0.4399999999999999], 7: [0.3349090909090909], 8: [0.41270000000000007], 9: [0.4038666666666666], 10: [0.25766666666666665], 11: [0.33399999999999996], 12: [0.38160000000000005], 13: [0.3705333333333333], 14: [0.37046153846153845], 15: [0.24966666666666668], 16: [0.29672727272727273], 17: [0.4005714285714285], 18: [0.33814285714285713], 19: [0.37300000000000005], 20: [0.4582222222222223], 21: [0.3538461538461538], 22: [0.3535], 23: [0.24366666666666667], 24: [0.352], 25: [0.30300000000000005], 26: [0.3925714285714285], 27: [0.3358461538461539], 28: [0.4206153846153846], 29: [0.35566666666666663], 30: [0.4408571428571429], 31: [0.36225000000000007], 32: [0.4715999999999999], 33: [0.36257142857142854], 34: [0.242], 36: [0.3188], 37: [0.306], 38: [0.3522857142857143], 39: [0.37542857142857144], 40: [0.37244444444444447], 41: [0.3566666666666667], 42: [0.3985], 43: [0.4114285714285714], 44: [0.329], 45: [0.39039999999999997], 46: [0.461], 47: [0.358], 48: [0.347], 49: [0.33044444444444443], 50: [0.25433333333333336], 51: [0.29379999999999995], 52: [0.31400000000000006], 53: [0.3454545454545454], 54: [0.3662], 55: [0.3527272727272727], 56: [0.3792727272727273], 57: [0.37500000000000006], 58: [0.38075], 59: [0.42028571428571426], 60: [0.4015], 61: [0.3715555555555556], 62: [0.35419999999999996], 63: [0.3705454545454545], 64: [0.3188888888888889], 65: [0.3283333333333333], 66: [0.3425714285714286], 67: [0.34724999999999995], 68: [0.37266666666666665], 69: [0.39272727272727276], 70: [0.38483333333333336], 71: [0.39], 72: [0.38760000000000006], 73: [0.3954], 74: [0.38309090909090915], 75: [0.375], 76: [0.37242857142857144], 77: [0.40380000000000005], 78: [0.40745454545454546], 79: [0.4058333333333333], 80: [0.4149999999999999], 81: [0.3956363636363637], 82: [0.3972727272727273], 83: [0.4015], 84: [0.44000000000000006], 85: [0.46349999999999997], 86: [0.44125], 87: [0.44625], 88: [0.42], 89: [0.3793333333333333], 90: [0.3844444444444444], 91: [0.3897777777777778], 92: [0.38450000000000006], 93: [0.4005], 94: [0.38275], 95: [0.3605454545454546], 96: [0.41019999999999995], 97: [0.4115], 98: [0.41600000000000004], 99: [0.3874000000000001], 100: [0.39], 101: [0.39633333333333337], 102: [0.404], 103: [0.449], 104: [0.4371428571428571], 105: [0.4736666666666666], 106: [0.47766666666666663], 107: [0.458], 108: [0.46033333333333326], 109: [0.47519999999999996], 110: [0.4382857142857143], 111: [0.40885714285714286], 112: [0.3897777777777778], 113: [0.367], 114: [0.36981818181818177], 115: [0.4384], 116: [0.4335555555555556], 117: [0.4314], 118: [0.41690909090909095], 119: [0.41345454545454546], 120: [0.43760000000000004], 121: [0.42200000000000004], 122: [0.44560000000000005], 123: [0.4289090909090909], 124: [0.4668888888888889], 125: [0.44939999999999997], 126: [0.44345454545454555], 127: [0.4853333333333334], 128: [0.48866666666666664], 129: [0.47111111111111126], 130: [0.4466666666666667], 131: [0.4615], 132: [0.42288888888888887], 133: [0.42600000000000005], 134: [0.47100000000000003], 135: [0.4583333333333333], 136: [0.48], 137: [0.4296666666666667], 138: [0.4720000000000001], 139: [0.47000000000000003], 140: [0.42285714285714293], 141: [0.44966666666666666], 142: [0.4526666666666666], 143: [0.38599999999999995], 144: [0.39828571428571424], 145: [0.36560000000000004], 146: [0.3737142857142857], 147: [0.432], 148: [0.4346666666666667], 149: [0.386], 150: [0.3877142857142858], 151: [0.33171428571428574], 152: [0.4452], 153: [0.44880000000000003], 154: [0.38885714285714285], 155: [0.43520000000000003], 156: [0.4123333333333334], 157: [0.414], 158: [0.41657142857142865], 159: [0.4317142857142858], 160: [0.43500000000000005], 161: [0.4453333333333333], 162: [0.447], 163: [0.4508571428571429], 164: [0.42725], 165: [0.42974999999999997], 166: [0.43288888888888893], 167: [0.45575000000000004], 168: [0.45849999999999996], 169: [0.4044], 170: [0.46375], 171: [0.46675], 172: [0.442], 173: [0.44571428571428573], 174: [0.4766666666666666], 175: [0.4202857142857143], 176: [0.41200000000000003], 177: [0.41475], 178: [0.41725], 179: [0.4071999999999999], 180: [0.42519999999999997], 181: [0.4393333333333333], 182: [0.4242], 183: [0.4251111111111111], 184: [0.41500000000000004], 185: [0.4042222222222222], 186: [0.40555555555555556], 187: [0.43475], 188: [0.4351111111111111], 189: [0.4048333333333332], 190: [0.4214545454545455], 191: [0.42799999999999994], 192: [0.3996666666666666], 193: [0.46259999999999996], 194: [0.46499999999999997], 195: [0.44781818181818184], 196: [0.4308333333333334], 197: [0.47711111111111104], 198: [0.47933333333333333], 199: [0.4815555555555555], 200: [0.4530909090909091], 201: [0.4532], 202: [0.45355555555555566], 203: [0.45511111111111113], 204: [0.44800000000000006], 205: [0.45020000000000004], 206: [0.4753333333333333], 207: [0.458], 208: [0.4595], 209: [0.4493333333333333], 210: [0.4320000000000001], 211: [0.46525000000000005], 212: [0.467], 213: [0.4685], 214: [0.4506], 215: [0.4524], 216: [0.45327272727272727], 217: [0.479], 218: [0.481], 219: [0.48340000000000005], 220: [0.4549090909090909], 221: [0.4481818181818182], 222: [0.4498181818181818], 223: [0.49119999999999997], 224: [0.4933333333333334], 225: [0.4948888888888889], 226: [0.47000000000000003], 227: [0.4718000000000001], 228: [0.47379999999999994], 229: [0.48133333333333334], 230: [0.501], 231: [0.50275], 232: [0.5085714285714286], 233: [0.4846666666666667], 234: [0.46060000000000006], 235: [0.44909090909090915], 236: [0.45799999999999996], 237: [0.4596363636363636], 238: [0.43420000000000003], 239: [0.43579999999999997], 240: [0.4378], 241: [0.46222222222222226], 242: [0.43866666666666676], 243: [0.4598181818181818], 244: [0.4614545454545454], 245: [0.4866666666666668], 246: [0.464], 247: [0.4654545454545454], 248: [0.5084000000000001], 249: [0.5348888888888889], 250: [0.5364444444444444], 251: [0.5382222222222222], 252: [0.5393333333333333], 253: [0.49711111111111106], 254: [0.5264444444444445], 255: [0.528], 256: [0.5297777777777779], 257: [0.4936363636363637], 258: [0.4952727272727273], 259: [0.43516666666666665], 260: [0.5277777777777778], 261: [0.5293333333333332], 262: [0.5306666666666666], 263: [0.5322222222222223], 264: [0.506909090909091], 265: [0.5306], 266: [0.5283636363636363], 267: [0.5252727272727273], 268: [0.46083333333333326], 269: [0.4952], 270: [0.5232], 271: [0.4878181818181819], 272: [0.5155555555555557], 273: [0.4917999999999999], 274: [0.4958], 275: [0.4565454545454546], 276: [0.4992], 277: [0.5166666666666667], 278: [0.5180000000000001], 279: [0.4841818181818182], 280: [0.4856363636363636], 281: [0.4734], 282: [0.4749999999999999], 283: [0.4772], 284: [0.4786], 285: [0.451], 286: [0.4696363636363636], 287: [0.47363636363636363], 288: [0.48218181818181804], 289: [0.46890909090909094], 290: [0.5036], 291: [0.5054000000000001], 292: [0.48083333333333345], 293: [0.4825], 294: [0.44984615384615384], 295: [0.429], 296: [0.45492307692307704], 297: [0.4567692307692308], 298: [0.42949999999999994], 299: [0.4306666666666667], 300: [0.4078461538461538], 301: [0.4096923076923077], 302: [0.4109230769230769], 303: [0.41492307692307695], 304: [0.41700000000000004], 305: [0.44599999999999995], 306: [0.42646153846153834], 307: [0.42733333333333334], 308: [0.429], 309: [0.4306666666666666], 310: [0.4323333333333334], 311: [0.4335], 312: [0.4110769230769231], 313: [0.41446153846153855], 314: [0.4163076923076922], 315: [0.41753846153846147], 316: [0.4256666666666667], 317: [0.4278333333333333], 318: [0.42850000000000005], 319: [0.4250769230769231], 320: [0.42692307692307685], 321: [0.42861538461538456], 322: [0.4164999999999999], 323: [0.41783333333333345], 324: [0.4004615384615384], 325: [0.4026153846153846], 326: [0.4043076923076923], 327: [0.4081666666666666], 328: [0.3707272727272727], 329: [0.41123076923076923], 330: [0.4123076923076923], 331: [0.39749999999999996], 332: [0.4206153846153847], 333: [0.4008333333333333], 334: [0.4235384615384615], 335: [0.43214285714285705], 336: [0.40985714285714286], 337: [0.413125], 338: [0.41500000000000004], 339: [0.3989333333333333], 340: [0.42040000000000005], 341: [0.42133333333333334], 342: [0.42306666666666676], 343: [0.42613333333333336], 344: [0.41400000000000003], 345: [0.40242857142857147], 346: [0.4202666666666666], 347: [0.4214666666666667], 348: [0.406857142857143], 349: [0.388923076923077], 350: [0.40714285714285714], 351: [0.3416363636363636], 352: [0.38861538461538464], 353: [0.37000000000000005], 354: [0.37418181818181817], 355: [0.40338461538461534], 356: [0.40507692307692306], 357: [0.3881666666666666], 358: [0.40784615384615386], 359: [0.4096923076923077], 360: [0.39300000000000007], 361: [0.41000000000000003], 362: [0.4114285714285714], 363: [0.4198571428571429], 364: [0.4046666666666667], 365: [0.3676363636363637], 366: [0.406], 367: [0.3912], 368: [0.3790769230769231], 369: [0.38360000000000005], 370: [0.42800000000000005], 371: [0.39316666666666666], 372: [0.34750000000000003], 373: [0.38600000000000007], 374: [0.37509090909090914], 375: [0.3782857142857142], 376: [0.3785], 377: [0.3555], 378: [0.363], 379: [0.3636363636363637], 380: [0.3601666666666667], 381: [0.3802], 382: [0.38033333333333336], 383: [0.3815], 384: [0.383], 385: [0.3887272727272727], 386: [0.3898181818181818], 387: [0.3932727272727272], 388: [0.3947272727272726], 389: [0.3858333333333333], 390: [0.38899999999999996], 391: [0.3908333333333333], 392: [0.3918333333333333], 393: [0.4012727272727272], 394: [0.40272727272727277], 395: [0.3917777777777778], 396: [0.3933333333333333], 397: [0.41600000000000004], 398: [0.41719999999999996], 399: [0.4177999999999999], 400: [0.4196], 401: [0.41236363636363643], 402: [0.3963636363636364], 403: [0.4044], 404: [0.41488888888888886], 405: [0.4332], 406: [0.40919999999999995], 407: [0.41080000000000005], 408: [0.41200000000000003], 409: [0.39355555555555555], 410: [0.3958181818181819], 411: [0.3885], 412: [0.3869230769230769], 413: [0.3886153846153846], 414: [0.39399999999999996], 415: [0.3912307692307691], 416: [0.3924615384615385], 417: [0.3981666666666666], 418: [0.3978461538461539], 419: [0.39876923076923076], 420: [0.40633333333333327], 421: [0.4076666666666667], 422: [0.4086666666666667], 423: [0.4098333333333333], 424: [0.41133333333333333], 425: [0.4128333333333332], 426: [0.4110909090909091], 427: [0.41254545454545455], 428: [0.41363636363636364], 429: [0.4048888888888888], 430: [0.4057777777777778], 431: [0.4075555555555555], 432: [0.40822222222222215], 433: [0.4024000000000001], 434: [0.4016666666666666], 435: [0.4053333333333333], 436: [0.40666666666666657], 437: [0.3945454545454545], 438: [0.39581818181818185], 439: [0.3970909090909091], 440: [0.3983636363636363], 441: [0.40090909090909094], 442: [0.40254545454545454], 443: [0.40418181818181814], 444: [0.40581818181818186], 445: [0.40709090909090917], 446: [0.40800000000000003], 447: [0.39619999999999994], 448: [0.39977777777777784], 449: [0.4002222222222223], 450: [0.40177777777777773], 451: [0.40244444444444444], 452: [0.4037777777777778], 453: [0.4053333333333333], 454: [0.40644444444444444], 455: [0.4073333333333334], 456: [0.4056], 457: [0.40755555555555545], 458: [0.4093333333333334], 459: [0.41000000000000003], 460: [0.4115555555555555], 461: [0.41774999999999995], 462: [0.4137777777777778], 463: [0.41488888888888886], 464: [0.42124999999999996], 465: [0.41711111111111115], 466: [0.42125], 467: [0.43], 468: [0.42375], 469: [0.42475], 470: [0.42624999999999996], 471: [0.42674999999999996], 472: [0.41714285714285715], 473: [0.41111111111111115], 474: [0.41622222222222216], 475: [0.419], 476: [0.41850000000000004], 477: [0.41933333333333334], 478: [0.42275], 479: [0.4215555555555556], 480: [0.4224444444444445], 481: [0.42377777777777775], 482: [0.41428571428571426], 483: [0.41800000000000004], 484: [0.4185714285714286], 485: [0.42057142857142854], 486: [0.42057142857142854], 487: [0.4225714285714286], 488: [0.4225714285714286], 489: [0.42457142857142854], 490: [0.42457142857142854], 491: [0.4265714285714286], 492: [0.43100000000000005], 493: [0.433], 494: [0.433], 495: [0.43500000000000005], 496: [0.436], 497: [0.4368], 498: [0.43760000000000004], 499: [0.43879999999999997], 500: [0.432], 501: [0.43333333333333335], 502: [0.43366666666666664], 503: [0.43533333333333335], 504: [0.436], 505: [0.43733333333333335], 506: [0.4376666666666667], 507: [0.43933333333333335], 508: [0.442], 509: [0.4436666666666667], 510: [0.444], 511: [0.44566666666666666], 512: [0.446], 513: [0.4476666666666667], 514: [0.44766666666666666], 515: [0.44933333333333336], 516: [0.4496666666666667], 517: [0.45133333333333336], 518: [0.4495], 519: [0.4505], 520: [0.43920000000000003], 521: [0.4408], 522: [0.41200000000000003], 523: [0.41200000000000003], 524: [0.41400000000000003], 525: [0.41400000000000003], 526: [0.41600000000000004], 527: [0.41533333333333333], 528: [0.4166666666666667], 529: [0.41733333333333333], 530: [0.4186666666666667], 531: [0.41933333333333334], 532: [0.4206666666666667], 533: [0.42133333333333334], 534: [0.4226666666666667], 535: [0.42333333333333334], 536: [0.4246666666666667], 537: [0.42533333333333334], 538: [0.426], 539: [0.417], 540: [0.418], 541: [0.418], 542: [0.42], 543: [0.42], 544: [0.422], 545: [0.422], 546: [0.424], 547: [0.424], 548: [0.426], 549: [0.426], 550: [0.427], 551: [0.428], 552: [0.42], 553: [0.422], 554: [0.422], 555: [0.422], 556: [0.424], 557: [0.424], 558: [0.426], 559: [0.426], 560: [0.423], 561: [0.425], 562: [0.425], 563: [0.426]}
    # tls_conn1_total_results_overall_iters = {1: [0.8934285714285715], 2: [0.7163999999999999], 3: [0.6682857142857143], 4: [0.5023333333333334], 5: [0.5071111111111111], 6: [0.4399999999999999], 7: [0.3349090909090909], 8: [0.41270000000000007], 9: [0.4038666666666666], 10: [0.25766666666666665], 11: [0.33399999999999996], 12: [0.38160000000000005], 13: [0.3705333333333333], 14: [0.37046153846153845], 15: [0.24966666666666668], 16: [0.29672727272727273], 17: [0.4005714285714285], 18: [0.33814285714285713], 19: [0.37300000000000005], 20: [0.4582222222222223], 21: [0.3538461538461538], 22: [0.3535], 23: [0.24366666666666667], 24: [0.352], 25: [0.30300000000000005], 26: [0.3925714285714285], 27: [0.3358461538461539], 28: [0.4206153846153846], 29: [0.35566666666666663], 30: [0.4408571428571429], 31: [0.36225000000000007], 32: [0.4715999999999999], 33: [0.36257142857142854], 34: [0.242], 36: [0.3188], 37: [0.306], 38: [0.3522857142857143], 39: [0.37542857142857144], 40: [0.37244444444444447], 41: [0.3566666666666667], 42: [0.3985], 43: [0.4114285714285714], 44: [0.329], 45: [0.39039999999999997], 46: [0.461], 47: [0.358], 48: [0.347], 49: [0.33044444444444443], 50: [0.25433333333333336], 51: [0.29379999999999995], 52: [0.31400000000000006], 53: [0.3454545454545454], 54: [0.3662], 55: [0.3527272727272727], 56: [0.3792727272727273], 57: [0.37500000000000006], 58: [0.38075], 59: [0.42028571428571426], 60: [0.4015], 61: [0.3715555555555556], 62: [0.35419999999999996], 63: [0.3705454545454545], 64: [0.3188888888888889], 65: [0.3283333333333333], 66: [0.3425714285714286], 67: [0.34724999999999995], 68: [0.37266666666666665], 69: [0.39272727272727276], 70: [0.38483333333333336], 71: [0.39], 72: [0.38760000000000006], 73: [0.3954], 74: [0.38309090909090915], 75: [0.375], 76: [0.37242857142857144], 77: [0.40380000000000005], 78: [0.40745454545454546], 79: [0.4058333333333333], 80: [0.4149999999999999], 81: [0.3956363636363637], 82: [0.3972727272727273], 83: [0.4015], 84: [0.44000000000000006], 85: [0.46349999999999997], 86: [0.44125], 87: [0.44625], 88: [0.42], 89: [0.3793333333333333], 90: [0.3844444444444444], 91: [0.3897777777777778], 92: [0.38450000000000006], 93: [0.4005], 94: [0.38275], 95: [0.3605454545454546], 96: [0.41019999999999995], 97: [0.4115], 98: [0.41600000000000004], 99: [0.3874000000000001], 100: [0.39], 101: [0.39633333333333337], 102: [0.404], 103: [0.449], 104: [0.4371428571428571], 105: [0.4736666666666666], 106: [0.47766666666666663], 107: [0.458], 108: [0.46033333333333326], 109: [0.47519999999999996], 110: [0.4382857142857143], 111: [0.40885714285714286], 112: [0.3897777777777778], 113: [0.367], 114: [0.36981818181818177], 115: [0.4384], 116: [0.4335555555555556], 117: [0.4314], 118: [0.41690909090909095], 119: [0.41345454545454546], 120: [0.43760000000000004], 121: [0.42200000000000004], 122: [0.44560000000000005], 123: [0.4289090909090909], 124: [0.4668888888888889], 125: [0.44939999999999997], 126: [0.44345454545454555], 127: [0.4853333333333334], 128: [0.48866666666666664], 129: [0.47111111111111126], 130: [0.4466666666666667], 131: [0.4615], 132: [0.42288888888888887], 133: [0.42600000000000005], 134: [0.47100000000000003], 135: [0.4583333333333333], 136: [0.48], 137: [0.4296666666666667], 138: [0.4720000000000001], 139: [0.47000000000000003], 140: [0.42285714285714293], 141: [0.44966666666666666], 142: [0.4526666666666666], 143: [0.38599999999999995], 144: [0.39828571428571424], 145: [0.36560000000000004], 146: [0.3737142857142857], 147: [0.432], 148: [0.4346666666666667], 149: [0.386], 150: [0.3877142857142858], 151: [0.33171428571428574], 152: [0.4452], 153: [0.44880000000000003], 154: [0.38885714285714285], 155: [0.43520000000000003], 156: [0.4123333333333334], 157: [0.414], 158: [0.41657142857142865], 159: [0.4317142857142858], 160: [0.43500000000000005], 161: [0.4453333333333333], 162: [0.447], 163: [0.4508571428571429], 164: [0.42725], 165: [0.42974999999999997], 166: [0.43288888888888893], 167: [0.45575000000000004], 168: [0.45849999999999996], 169: [0.4044], 170: [0.46375], 171: [0.46675], 172: [0.442], 173: [0.44571428571428573], 174: [0.4766666666666666], 175: [0.4202857142857143], 176: [0.41200000000000003], 177: [0.41475], 178: [0.41725], 179: [0.4071999999999999], 180: [0.42519999999999997], 181: [0.4393333333333333], 182: [0.4242], 183: [0.4251111111111111], 184: [0.41500000000000004], 185: [0.4042222222222222], 186: [0.40555555555555556], 187: [0.43475], 188: [0.4351111111111111], 189: [0.4048333333333332], 190: [0.4214545454545455], 191: [0.42799999999999994], 192: [0.3996666666666666], 193: [0.46259999999999996], 194: [0.46499999999999997], 195: [0.44781818181818184], 196: [0.4308333333333334], 197: [0.47711111111111104], 198: [0.47933333333333333], 199: [0.4815555555555555], 200: [0.4530909090909091], 201: [0.4532], 202: [0.45355555555555566], 203: [0.45511111111111113], 204: [0.44800000000000006], 205: [0.45020000000000004], 206: [0.4753333333333333], 207: [0.458], 208: [0.4595], 209: [0.4493333333333333], 210: [0.4320000000000001], 211: [0.46525000000000005], 212: [0.467], 213: [0.4685], 214: [0.4506], 215: [0.4524], 216: [0.45327272727272727], 217: [0.479], 218: [0.481], 219: [0.48340000000000005], 220: [0.4549090909090909], 221: [0.4481818181818182], 222: [0.4498181818181818], 223: [0.49119999999999997], 224: [0.4933333333333334], 225: [0.4948888888888889], 226: [0.47000000000000003], 227: [0.4718000000000001], 228: [0.47379999999999994], 229: [0.48133333333333334], 230: [0.501], 231: [0.50275], 232: [0.5085714285714286], 233: [0.4846666666666667], 234: [0.46060000000000006], 235: [0.44909090909090915], 236: [0.45799999999999996], 237: [0.4596363636363636], 238: [0.43420000000000003], 239: [0.43579999999999997], 240: [0.4378]}

    # print("\n\n\ntls conn1 summarized results: ", tls_conn1_total_results_overall_iters)

    conn1_sanatized_x = []
    conn1_sanatized_y = []

    for key, value in tls_conn1_total_results_overall_iters.items():
        conn1_sanatized_x.append(key)
        conn1_sanatized_y.append(value)

    # This is the total result for a specific RATE and N iters

    total_result = []
    total_xaxis_result = []
    total_yaxis_result = []
    total_xaxis_result.append(conn1_sanatized_x)
    total_yaxis_result.append(conn1_sanatized_y)
    total_result.append(total_xaxis_result)
    total_result.append(total_yaxis_result)

    # add it to the list which contins PER RATE the TOTAL_RESULTS
    name = os.path.basename(__file__)[:-3] + "tlsMerged"
    shared.save_raw_data(name, (rate, total_result))

    return total_result


def merge_quic_iters(quic_fairness_over_time_per_rate_normalized, rate):
    quic_conn1_total_results_overall_iters = {}

    # add the x axis of the different iters together
    for quic_iter in quic_fairness_over_time_per_rate_normalized:

        conn1_c = 0

        # conn1: if no entry for current x value exists => create
        # if value exisits: add the corresponding y value
        # if not: just create
        for x_axis_item in quic_iter[0][0]:
            if x_axis_item in quic_conn1_total_results_overall_iters:
                quic_conn1_total_results_overall_iters[x_axis_item] += [
                    quic_iter[1][0][conn1_c]]
            else:
                quic_conn1_total_results_overall_iters[x_axis_item] = [
                    quic_iter[1][0][conn1_c]]

            conn1_c += 1

    # print("\n\n\nquic conn1 not summarized results: ", quic_conn1_total_results_overall_iters)

    # checked until here

    # for the added stuff calculate the sum if necessary
    for key, value in quic_conn1_total_results_overall_iters.items():
        if len(value) > 1:
            denominator = len(value)
            numerator = 0

            for item in value:
                numerator += item

            new_val = numerator / denominator
            # replace old value with new sum
            quic_conn1_total_results_overall_iters[key] = [new_val]

            #print("\nconn1 value is: ", value)
            #print("we have to take sum")

    # long > 240 s quic_conn1_total_results_overall_iters = {1: [0.924], 2: [0.9391428571428572], 3: [0.9015999999999998], 4: [0.6316999999999999], 5: [0.6761000000000001], 6: [0.6492857142857141], 7: [0.6325000000000001], 8: [0.6609230769230768], 9: [0.632], 10: [0.5970999999999999], 11: [0.6219], 12: [0.6459999999999998], 13: [0.6213846153846153], 14: [0.627], 15: [0.5371428571428571], 16: [0.6056999999999999], 17: [0.6209333333333333], 18: [0.6378461538461538], 19: [0.6298181818181817], 20: [0.6356363636363636], 21: [0.6180000000000001], 22: [0.5258333333333333], 23: [0.5832999999999999], 24: [0.5989], 25: [0.6081333333333332], 26: [0.6226153846153846], 27: [0.626], 28: [0.718], 29: [0.6756], 30: [0.5801999999999999], 31: [0.612], 32: [0.5874545454545455], 33: [0.5136000000000001], 34: [0.5238333333333333], 35: [0.577076923076923], 36: [0.5761176470588235], 37: [0.5794285714285714], 38: [0.5860000000000001], 39: [0.5932307692307692], 40: [0.6241666666666669], 41: [0.6615555555555556], 42: [0.6584], 43: [0.6107142857142858], 44: [0.6084615384615384], 45: [0.6250666666666667], 46: [0.6314666666666665], 47: [0.6128571428571429], 48: [0.584], 49: [0.5892499999999998], 50: [0.5983999999999999], 51: [0.605], 52: [0.6002857142857143], 53: [0.6245714285714286], 54: [0.6276666666666667], 55: [0.652], 56: [0.6399999999999999], 57: [0.6308333333333334], 58: [0.6143076923076923], 59: [0.6346153846153846], 60: [0.6215384615384616], 61: [0.6344615384615385], 62: [0.6235384615384615], 63: [0.6017142857142856], 64: [0.5835384615384616], 65: [0.6025333333333333], 66: [0.5965333333333332], 67: [0.608], 68: [0.6126153846153847], 69: [0.6025714285714285], 70: [0.6348], 71: [0.6384000000000001], 72: [0.6674285714285714], 73: [0.6415555555555557], 74: [0.6276363636363637], 75: [0.6551428571428571], 76: [0.62325], 77: [0.6164444444444445], 78: [0.6262000000000001], 79: [0.6280000000000001], 80: [0.6248888888888889], 81: [0.6029090909090908], 82: [0.598], 83: [0.6135], 84: [0.6221818181818181], 85: [0.5994285714285715], 86: [0.5970000000000001], 87: [0.6005], 88: [0.6043333333333333], 89: [0.606909090909091], 90: [0.5983636363636364], 91: [0.5826666666666666], 92: [0.5868333333333332], 93: [0.590923076923077], 94: [0.5926666666666667], 95: [0.5912307692307692], 96: [0.5801818181818184], 97: [0.5870769230769232], 98: [0.5903076923076923], 99: [0.6132307692307692], 100: [0.58], 101: [0.5846153846153846], 102: [0.5972857142857143], 103: [0.6032857142857144], 104: [0.6086153846153846], 105: [0.606], 106: [0.6035384615384616], 107: [0.6218333333333333], 108: [0.6015], 109: [0.5978461538461538], 110: [0.6007692307692307], 111: [0.6046666666666667], 112: [0.5928333333333333], 113: [0.5956666666666667], 114: [0.5985454545454547], 115: [0.600909090909091], 116: [0.6216], 117: [0.6273333333333334], 118: [0.6248], 119: [0.5986153846153847], 120: [0.635090909090909], 121: [0.6471111111111111], 122: [0.6491111111111111], 123: [0.6513333333333332], 124: [0.66275], 125: [0.6564444444444444], 126: [0.6582222222222222], 127: [0.6441818181818182], 128: [0.6223636363636363], 129: [0.6052000000000002], 130: [0.5818000000000001], 131: [0.5698181818181818], 132: [0.5906], 133: [0.5660000000000001], 134: [0.5650909090909091], 135: [0.5678181818181819], 136: [0.5703636363636363], 137: [0.5647272727272727], 138: [0.5672727272727273], 139: [0.5783999999999999], 140: [0.5808000000000001], 141: [0.5705454545454546], 142: [0.585], 143: [0.5871999999999999], 144: [0.5750909090909091], 145: [0.5772727272727273], 146: [0.5789090909090909], 147: [0.5943636363636362], 148: [0.5761666666666665], 149: [0.5778333333333334], 150: [0.5750909090909091], 151: [0.55], 152: [0.5517142857142857], 153: [0.5626666666666666], 154: [0.5641428571428573], 155: [0.5807692307692308], 156: [0.592923076923077], 157: [0.6050000000000001], 158: [0.6216363636363637], 159: [0.5907142857142859], 160: [0.6030769230769232], 161: [0.594], 162: [0.6232727272727273], 163: [0.6041818181818182], 164: [0.6737777777777778], 165: [0.6753333333333332], 166: [0.6775], 167: [0.6534000000000001], 168: [0.6552], 169: [0.6564], 170: [0.6478181818181817], 171: [0.621090909090909], 172: [0.6266666666666666], 173: [0.6216363636363637], 174: [0.6275000000000001], 175: [0.5981818181818181], 176: [0.6172], 177: [0.6182], 178: [0.6202000000000001], 179: [0.6134000000000001], 180: [0.5918181818181819], 181: [0.6078181818181818], 182: [0.5943636363636364], 183: [0.6142000000000001], 184: [0.600909090909091], 185: [0.5936000000000001], 186: [0.594], 187: [0.6081818181818182], 188: [0.6130000000000001], 189: [0.6505], 190: [0.6622857142857143], 191: [0.6639999999999999], 192: [0.6651428571428571], 193: [0.635], 194: [0.6589999999999999], 195: [0.6603333333333333], 196: [0.6613333333333333], 197: [0.6317142857142857], 198: [0.6255], 199: [0.62675], 200: [0.6293999999999998], 201: [0.6139999999999999], 202: [0.6317999999999999], 203: [0.633], 204: [0.6440000000000001], 205: [0.6448000000000002], 206: [0.6212000000000001], 207: [0.6258181818181818], 208: [0.634], 209: [0.629090909090909], 210: [0.6305454545454545], 211: [0.6316363636363636], 212: [0.6256666666666666], 213: [0.6398181818181817], 214: [0.643090909090909], 215: [0.646], 216: [0.647], 217: [0.67], 218: [0.6713333333333334], 219: [0.6722222222222222], 220: [0.6571999999999999], 221: [0.6742222222222223], 222: [0.6757777777777778], 223: [0.6766666666666665], 224: [0.6504000000000001], 225: [0.652], 226: [0.653], 227: [0.6511111111111112], 228: [0.6517777777777778], 229: [0.6376000000000001], 230: [0.6237777777777778], 231: [0.6212], 232: [0.6085454545454545], 233: [0.6096363636363636], 234: [0.611], 235: [0.6113999999999999], 236: [0.6121999999999999], 237: [0.6129999999999999], 238: [0.6139999999999999], 239: [0.6152], 240: [0.6157999999999999], 241: [0.6154545454545455], 242: [0.6196], 243: [0.6517499999999999], 244: [0.6525], 245: [0.6264444444444446], 246: [0.6272], 247: [0.6281999999999999], 248: [0.6276363636363637], 249: [0.6283636363636365], 250: [0.6294545454545455], 251: [0.6167272727272727], 252: [0.618], 253: [0.605], 254: [0.6124999999999999], 255: [0.6136666666666666], 256: [0.6143636363636363], 257: [0.6154545454545455], 258: [0.6290000000000001], 259: [0.63], 260: [0.6304444444444445], 261: [0.6313333333333333], 262: [0.6322222222222222], 263: [0.6331111111111112], 264: [0.6537777777777778], 265: [0.6548888888888889], 266: [0.64025], 267: [0.6417499999999999], 268: [0.6038], 269: [0.6246666666666667], 270: [0.6255555555555555], 271: [0.6295], 272: [0.6477777777777777], 273: [0.6486666666666666], 274: [0.64925], 275: [0.6791428571428572], 276: [0.6902857142857144], 277: [0.6749999999999999], 278: [0.6597500000000001], 279: [0.6331111111111111], 280: [0.6325714285714286], 281: [0.6337142857142857], 282: [0.609], 283: [0.61025], 284: [0.61325], 285: [0.61425], 286: [0.6214285714285713], 287: [0.5942500000000001], 288: [0.5955], 289: [0.5967499999999999], 290: [0.5977499999999999], 291: [0.6034999999999999], 292: [0.6075], 293: [0.622], 294: [0.6234285714285716], 295: [0.624], 296: [0.6248571428571429], 297: [0.6262857142857143], 298: [0.6268571428571429], 299: [0.6274285714285714], 300: [0.6288571428571429], 301: [0.6297142857142858], 302: [0.6016666666666667], 303: [0.6026666666666666], 304: [0.6036666666666667], 305: [0.6046666666666667], 306: [0.6053333333333334], 307: [0.556], 308: [0.5566666666666666], 309: [0.5573333333333333], 310: [0.5586666666666668], 311: [0.5843999999999999], 312: [0.5448000000000001], 313: [0.5871999999999999], 314: [0.5472], 315: [0.5884], 316: [0.5379999999999999], 317: [0.5133333333333333], 318: [0.564], 319: [0.5215000000000001], 320: [0.573], 321: [0.5745], 322: [0.575], 323: [0.5716000000000001], 324: [0.5305], 325: [0.5728000000000001], 326: [0.505], 327: [0.5345], 328: [0.536], 329: [0.5326666666666667], 330: [0.5015000000000001], 331: [0.5025000000000001], 332: [0.48300000000000004], 333: [0.5633333333333334], 334: [0.564], 335: [0.5815], 336: [0.5815], 337: [0.523], 338: [0.525], 339: [0.526], 340: [0.5413333333333333], 341: [0.5419999999999999], 342: [0.5439999999999999], 343: [0.545], 344: [0.5533333333333333], 345: [0.5344], 346: [0.4965], 347: [0.4965], 348: [0.4985], 349: [0.4995], 350: [0.5135000000000001], 351: [0.515], 352: [0.5272], 353: [0.528], 354: [0.5225], 355: [0.524], 356: [0.5533333333333333], 357: [0.5553333333333333], 358: [0.5640000000000001], 359: [0.5660000000000001], 360: [0.5660000000000001], 361: [0.5680000000000001], 362: [0.5680000000000001], 363: [0.5219999999999999], 364: [0.5700000000000001], 365: [0.5700000000000001], 366: [0.5720000000000001], 367: [0.5720000000000001], 368: [0.5740000000000001], 369: [0.5740000000000001], 370: [0.576], 371: [0.576], 372: [0.577], 373: [0.578], 374: [0.579], 375: [0.58], 376: [0.581], 377: [0.57], 378: [0.57], 379: [0.57], 380: [0.572], 381: [0.572], 401: [0.556], 402: [0.558], 403: [0.558], 404: [0.55], 405: [0.55], 406: [0.575], 408: [0.562], 410: [0.584]}
    # quic_conn1_total_results_overall_iters = {1: [0.924], 2: [0.9391428571428572], 3: [0.9015999999999998], 4: [0.6316999999999999], 5: [0.6761000000000001], 6: [0.6492857142857141], 7: [0.6325000000000001], 8: [0.6609230769230768], 9: [0.632], 10: [0.5970999999999999], 11: [0.6219], 12: [0.6459999999999998], 13: [0.6213846153846153], 14: [0.627], 15: [0.5371428571428571], 16: [0.6056999999999999], 17: [0.6209333333333333], 18: [0.6378461538461538], 19: [0.6298181818181817], 20: [0.6356363636363636], 21: [0.6180000000000001], 22: [0.5258333333333333], 23: [0.5832999999999999], 24: [0.5989], 25: [0.6081333333333332], 26: [0.6226153846153846], 27: [0.626], 28: [0.718], 29: [0.6756], 30: [0.5801999999999999], 31: [0.612], 32: [0.5874545454545455], 33: [0.5136000000000001], 34: [0.5238333333333333], 35: [0.577076923076923], 36: [0.5761176470588235], 37: [0.5794285714285714], 38: [0.5860000000000001], 39: [0.5932307692307692], 40: [0.6241666666666669], 41: [0.6615555555555556], 42: [0.6584], 43: [0.6107142857142858], 44: [0.6084615384615384], 45: [0.6250666666666667], 46: [0.6314666666666665], 47: [0.6128571428571429], 48: [0.584], 49: [0.5892499999999998], 50: [0.5983999999999999], 51: [0.605], 52: [0.6002857142857143], 53: [0.6245714285714286], 54: [0.6276666666666667], 55: [0.652], 56: [0.6399999999999999], 57: [0.6308333333333334], 58: [0.6143076923076923], 59: [0.6346153846153846], 60: [0.6215384615384616], 61: [0.6344615384615385], 62: [0.6235384615384615], 63: [0.6017142857142856], 64: [0.5835384615384616], 65: [0.6025333333333333], 66: [0.5965333333333332], 67: [0.608], 68: [0.6126153846153847], 69: [0.6025714285714285], 70: [0.6348], 71: [0.6384000000000001], 72: [0.6674285714285714], 73: [0.6415555555555557], 74: [0.6276363636363637], 75: [0.6551428571428571], 76: [0.62325], 77: [0.6164444444444445], 78: [0.6262000000000001], 79: [0.6280000000000001], 80: [0.6248888888888889], 81: [0.6029090909090908], 82: [0.598], 83: [0.6135], 84: [0.6221818181818181], 85: [0.5994285714285715], 86: [0.5970000000000001], 87: [0.6005], 88: [0.6043333333333333], 89: [0.606909090909091], 90: [0.5983636363636364], 91: [0.5826666666666666], 92: [0.5868333333333332], 93: [0.590923076923077], 94: [0.5926666666666667], 95: [0.5912307692307692], 96: [0.5801818181818184], 97: [0.5870769230769232], 98: [0.5903076923076923], 99: [0.6132307692307692], 100: [0.58], 101: [0.5846153846153846], 102: [0.5972857142857143], 103: [0.6032857142857144], 104: [0.6086153846153846], 105: [0.606], 106: [0.6035384615384616], 107: [0.6218333333333333], 108: [0.6015], 109: [0.5978461538461538], 110: [0.6007692307692307], 111: [0.6046666666666667], 112: [0.5928333333333333], 113: [0.5956666666666667], 114: [0.5985454545454547], 115: [0.600909090909091], 116: [0.6216], 117: [0.6273333333333334], 118: [0.6248], 119: [0.5986153846153847], 120: [0.635090909090909], 121: [0.6471111111111111], 122: [0.6491111111111111], 123: [0.6513333333333332], 124: [0.66275], 125: [0.6564444444444444], 126: [0.6582222222222222], 127: [0.6441818181818182], 128: [0.6223636363636363], 129: [0.6052000000000002], 130: [0.5818000000000001], 131: [0.5698181818181818], 132: [0.5906], 133: [0.5660000000000001], 134: [0.5650909090909091], 135: [0.5678181818181819], 136: [0.5703636363636363], 137: [0.5647272727272727], 138: [0.5672727272727273], 139: [0.5783999999999999], 140: [0.5808000000000001], 141: [0.5705454545454546], 142: [0.585], 143: [0.5871999999999999], 144: [0.5750909090909091], 145: [0.5772727272727273], 146: [0.5789090909090909], 147: [0.5943636363636362], 148: [0.5761666666666665], 149: [0.5778333333333334], 150: [0.5750909090909091], 151: [0.55], 152: [0.5517142857142857], 153: [0.5626666666666666], 154: [0.5641428571428573], 155: [0.5807692307692308], 156: [0.592923076923077], 157: [0.6050000000000001], 158: [0.6216363636363637], 159: [0.5907142857142859], 160: [0.6030769230769232], 161: [0.594], 162: [0.6232727272727273], 163: [0.6041818181818182], 164: [0.6737777777777778], 165: [0.6753333333333332], 166: [0.6775], 167: [0.6534000000000001], 168: [0.6552], 169: [0.6564], 170: [0.6478181818181817], 171: [0.621090909090909], 172: [0.6266666666666666], 173: [0.6216363636363637], 174: [0.6275000000000001], 175: [0.5981818181818181], 176: [0.6172], 177: [0.6182], 178: [0.6202000000000001], 179: [0.6134000000000001], 180: [0.5918181818181819], 181: [0.6078181818181818], 182: [0.5943636363636364], 183: [0.6142000000000001], 184: [0.600909090909091], 185: [0.5936000000000001], 186: [0.594], 187: [0.6081818181818182], 188: [0.6130000000000001], 189: [0.6505], 190: [0.6622857142857143], 191: [0.6639999999999999], 192: [0.6651428571428571], 193: [0.635], 194: [0.6589999999999999], 195: [0.6603333333333333], 196: [0.6613333333333333], 197: [0.6317142857142857], 198: [0.6255], 199: [0.62675], 200: [0.6293999999999998], 201: [0.6139999999999999], 202: [0.6317999999999999], 203: [0.633], 204: [0.6440000000000001], 205: [0.6448000000000002], 206: [0.6212000000000001], 207: [0.6258181818181818], 208: [0.634], 209: [0.629090909090909], 210: [0.6305454545454545], 211: [0.6316363636363636], 212: [0.6256666666666666], 213: [0.6398181818181817], 214: [0.643090909090909], 215: [0.646], 216: [0.647], 217: [0.67], 218: [0.6713333333333334], 219: [0.6722222222222222], 220: [0.6571999999999999], 221: [0.6742222222222223], 222: [0.6757777777777778], 223: [0.6766666666666665], 224: [0.6504000000000001], 225: [0.652], 226: [0.653], 227: [0.6511111111111112], 228: [0.6517777777777778], 229: [0.6376000000000001], 230: [0.6237777777777778], 231: [0.6212], 232: [0.6085454545454545], 233: [0.6096363636363636], 234: [0.611], 235: [0.6113999999999999], 236: [0.6121999999999999], 237: [0.6129999999999999], 238: [0.6139999999999999], 239: [0.6152], 240: [0.6157999999999999]}

    # print("\n\n\nquic conn1 summarized results: ", quic_conn1_total_results_overall_iters)

    conn1_sanatized_x = []
    conn1_sanatized_y = []

    for key, value in quic_conn1_total_results_overall_iters.items():
        conn1_sanatized_x.append(key)
        conn1_sanatized_y.append(value)

    # This is the total result for a specific RATE and N iters

    total_result = []
    total_xaxis_result = []
    total_yaxis_result = []
    total_xaxis_result.append(conn1_sanatized_x)
    total_yaxis_result.append(conn1_sanatized_y)
    total_result.append(total_xaxis_result)
    total_result.append(total_yaxis_result)

    # add it to the list which contins PER RATE the TOTAL_RESULTS
    name = os.path.basename(__file__)[:-3] + "QuicMerged"
    shared.save_raw_data(name, (rate, total_result))

    return total_result


def plot_iteration_result(quic_fairness_over_time_per_rate_normalized, tls_fairness_over_time_per_rate_normalized, delta_t_iterations):
    # NOTE: quic_fairness_over_time_per_rate_normalized holds ALL iterations for SINGLE RATE

    print("\nquic iterations: ", len(quic_fairness_over_time_per_rate_normalized))
    print("\ntls iterations: ", len(tls_fairness_over_time_per_rate_normalized))

    if len(quic_fairness_over_time_per_rate_normalized) != len(tls_fairness_over_time_per_rate_normalized):
        raise Exception("QUIC and TLS iterations diverge! That cannot be!")

    # print("\nquic iterations: ", quic_fairness_over_time_per_rate_normalized)
    # print("\ntls iterations: ", tls_fairness_over_time_per_rate_normalized)

    for quic_iter in quic_fairness_over_time_per_rate_normalized:
        index = quic_fairness_over_time_per_rate_normalized.index(quic_iter)
        # print("\nindex is: ", index)

        tls_iter = tls_fairness_over_time_per_rate_normalized[index]
        # offset between tls and quic regarding THAT iteration
        offset = delta_t_iterations[index]

        print("\n\nquic iter is: ", quic_iter)
        print("\n\ntls iter is: ", tls_iter)
        print("\n\noffset is: ", offset)

        plot_data_smoothing_iter(quic_iter, tls_iter, offset, index)


def evaluate_fairness(quic_results_for_rate, tls_results_for_rate, rate):

    quic_fairness_summary = 0
    tls_fairness_summary = 0

    # handle quic
    for quic_iter in quic_results_for_rate:
        x_axis_items = len(quic_iter[0][0])
        y_axis_sum = 0

        for y_axis_items in quic_iter[1][0]:
            y_axis_sum += y_axis_items

        quic_iter_fairness = y_axis_sum / x_axis_items

        # debug print("\n quic_iter result: ", quic_iter_fairness)
        quic_fairness_summary += quic_iter_fairness

    # len(quic_results_for_rate) == number of iters
    quic_fairness_summary = quic_fairness_summary / len(quic_results_for_rate)
    # debug print("\nquic fairness is: ", quic_fairness_summary)

    for tls_iter in tls_results_for_rate:
        x_axis_items = len(tls_iter[0][0])
        y_axis_sum = 0

        for y_axis_items in tls_iter[1][0]:
            y_axis_sum += y_axis_items

        tls_iter_fairness = y_axis_sum / x_axis_items

        # print("\n tls_iter result: ", tls_iter_fairness)
        tls_fairness_summary += tls_iter_fairness

    tls_fairness_summary = tls_fairness_summary / len(tls_results_for_rate)
    # debug print("\ntls fairness is: ", tls_fairness_summary)

    name = os.path.basename(__file__)[:-3] + "QuicFairnessPerRate"
    shared.save_raw_data(name, (rate, quic_fairness_summary))

    name = os.path.basename(__file__)[:-3] + "TlsFairnessPerRate"
    shared.save_raw_data(name, (rate, tls_fairness_summary))


def quic_remove_oscillation_and_double_values(quic_fairness_over_time_per_rate, rate):
    print("\n\n------------------- QUIC: Calculate Goodput/rate, remove oscillations, remove double values ------------------- ")

    # This stores all iteration results BUT: IN-ORDER, NO DOUBLE VALUES, NO OSCILLATION VALUS, RIGHT X-Y-MAPPING
    quic_fairness_over_time_per_rate_normalized = []
    c = 0

    quic_fairness_list = []

    for quic_fairness_iter in quic_fairness_over_time_per_rate:
        delete_index_conn = []

        # normalize conn
        for result in quic_fairness_iter[1][0]:
            normalized_result = result / rate
            result_index = quic_fairness_iter[1][0].index(result)

            # delete netem start oscillations
            if normalized_result > 1.0:
                print("\n\n\nratio over 1.0:", result)
                print("\n deleting index in next step: ", result_index)
                delete_index_conn.append(result_index)
                continue

            # replace goodput with ratio
            quic_fairness_iter[1][0][result_index] = normalized_result

        # now delete the stuff or we get inconsistent list
        while len(delete_index_conn) > 0:
            print("\ndeleting index of conn 1 now: ", delete_index_conn)
            delete_index = delete_index_conn.pop(0)
            del quic_fairness_iter[1][0][delete_index]
            del quic_fairness_iter[0][0][delete_index]

            # decrease all other indices of the list by one or we use wrong index
            delete_index_conn[:] = [index - 1 for index in delete_index_conn]

        # NEW RESULT: List with correct ratio values (not > 1.0) and same dimensions
        # debug print("\n\n\n\nFairness_iter without Oscillation is: {}\n\n\n\n".format(quic_fairness_iter))

        # this result does not contain any values > 1.0 ration: Check the len of the results
        # debug print("\n\n\n\nlen of x axis conn :", len(quic_fairness_iter[0][0]))
        # debug print("len of y axis conn :", len(quic_fairness_iter[1][0]))

        # Problem: We still got "double" values => same msmt info reply => eliminate those
        quic_conn_dict = OrderedDict()
        quic_conn_index = 0

        for x_axis_item in quic_fairness_iter[0][0]:
            quic_conn_dict[x_axis_item] = quic_fairness_iter[1][0][quic_conn_index]
            quic_conn_index += 1

        quic_conn_sanatized_x = []
        quic_conn_sanatized_y = []

        # we eliminiated all double values but we need lists for processing
        # not the dict is sorted in order
        for key, value in quic_conn_dict.items():
            # debug print("quic_conn adding key: ", key)
            quic_conn_sanatized_x.append(key)
            quic_conn_sanatized_y.append(value)

        # debug print("\n\nquic conn sanitzied x: ", quic_conn_sanatized_x)
        # debug print("\n\nquic conn sanitzied y: ", quic_conn_sanatized_y)

        iteration_result = []
        iteration_xaxis_result = []
        iteration_yaxis_result = []
        iteration_xaxis_result.append(quic_conn_sanatized_x)
        iteration_yaxis_result.append(quic_conn_sanatized_y)
        iteration_result.append(iteration_xaxis_result)
        iteration_result.append(iteration_yaxis_result)

        # "iteration_result" == IN-ORDER, NO DOUBLE VALUES, NO UNLOGICAL VALUS, RIGHT X-Y-MAPPING
        # debug print("\n\nIteration result is: ", iteration_result)
        quic_fairness_over_time_per_rate_normalized.append(iteration_result)

        # summarize fairness
        # debug print("\nlength of x axis: ", len(quic_conn_sanatized_x))
        # debug print("\nlength of y axis: ", len(quic_conn_sanatized_y))

    return quic_fairness_over_time_per_rate_normalized


def tls_remove_oscillation_and_double_values(tls_fairness_over_time_per_rate, rate):
    print("\n\n------------------- TLS: Calculate Goodput/rate, remove oscillations, remove double values ------------------- ")

    # POSSIBLE SECOND FUNCTION
    # This stores all iteration results BUT: IN-ORDER, NO DOUBLE VALUES, NO OSCILLATION VALUS, RIGHT X-Y-MAPPING
    tls_fairness_over_time_per_rate_normalized = []
    # c = counter for iteration
    c = 0

    tls_fairness_list = []

    for tls_fairness_iter in tls_fairness_over_time_per_rate:
        delete_index_conn = []

        # normalize conn
        for result in tls_fairness_iter[1][0]:
            normalized_result = result / rate
            result_index = tls_fairness_iter[1][0].index(result)

            # delete netem start oscillations
            if normalized_result > 1.0:
                print("\n\n\nratio over 1.0:", result)
                print("\n deleting index in next step: ", result_index)
                delete_index_conn.append(result_index)
                continue

            # replace goodput with ratio
            tls_fairness_iter[1][0][result_index] = normalized_result

        # now delete the stuff or we get inconsistent list
        while len(delete_index_conn) > 0:
            print("\ndeleting index of conn 1 now: ", delete_index_conn)
            delete_index = delete_index_conn.pop(0)
            del tls_fairness_iter[1][0][delete_index]
            del tls_fairness_iter[0][0][delete_index]

            # decrease all other indices of the list by one or we use wrong index
            delete_index_conn[:] = [index - 1 for index in delete_index_conn]

        # NEW RESULT: List with correct ratio values (not > 1.0) and same dimensions
        # debug print("\n\n\n\nFairness_iter without Oscillation is: {}\n\n\n\n".format(tls_fairness_iter))

        # this result does not contain any values > 1.0 ration: Check the len of the results
        # debug print("\n\n\n\nlen of x axis conn :", len(tls_fairness_iter[0][0]))
        # debug print("len of y axis conn :", len(tls_fairness_iter[1][0]))

        # Problem: We still got "double" values => same msmt info reply => eliminate those
        tls_conn_dict = OrderedDict()
        tls_conn_index = 0

        for x_axis_item in tls_fairness_iter[0][0]:
            tls_conn_dict[x_axis_item] = tls_fairness_iter[1][0][tls_conn_index]
            tls_conn_index += 1

        tls_conn_sanatized_x = []
        tls_conn_sanatized_y = []

        # we eliminiated all double values but we need lists for processing
        # not the dict is sorted in order
        for key, value in tls_conn_dict.items():
            # debug print("tls_conn adding key: ", key)
            tls_conn_sanatized_x.append(key)
            tls_conn_sanatized_y.append(value)

        # debug print("\n\ntls conn sanitzied x: ", tls_conn_sanatized_x)
        # debug print("\n\ntls conn sanitzied y: ", tls_conn_sanatized_y)

        iteration_result = []
        iteration_xaxis_result = []
        iteration_yaxis_result = []
        iteration_xaxis_result.append(tls_conn_sanatized_x)
        iteration_yaxis_result.append(tls_conn_sanatized_y)
        iteration_result.append(iteration_xaxis_result)
        iteration_result.append(iteration_yaxis_result)

        # "iteration_result" == IN-ORDER, NO DOUBLE VALUES, NO UNLOGICAL VALUS, RIGHT X-Y-MAPPING
        # debug print("\n\nIteration result is: ", iteration_result)
        tls_fairness_over_time_per_rate_normalized.append(iteration_result)

        # summarize fairness
        # debug print("\nlength of x axis: ", len(tls_conn_sanatized_x))
        # debug print("\nlength of y axis: ", len(tls_conn_sanatized_y))

    return tls_fairness_over_time_per_rate_normalized


def calculate_offset_tls_quic(quic_iter_res, tls_iter_res):
    print("\n\n------------------- Analyzing QUIC ------------------- ")
    for quic_msmt_pt in quic_iter_res:
        # for quic_msmt_pt in quic_data:
        ts_start = quic_msmt_pt[0]['ts-start']
        ts_end = quic_msmt_pt[0]['ts-end']
        b = quic_msmt_pt[0]['bytes']

        if int(b) == 0 and ts_end == ts_start:
            print("\n\nQUIC has an initial timestamp / no data yet received")
            print("\nQUIC init msmt point is: ", quic_msmt_pt)
            quic_init = quic_msmt_pt
            continue
        else:
            print("\nFound QUICs first real data at index:",
                  quic_iter_res.index(quic_msmt_pt))
            # print("\n\nFound QUICs first real data at index:", quic_data.index(quic_msmt_pt))
            print("\nQUIC real msmt point is: ", quic_msmt_pt)
            quic_first = quic_msmt_pt
            break

    ### check the last timestamp ###
    quic_last = quic_iter_res[-1]
    # quic_last = quic_data[-1]
    print("\nQUIC last msmt point is: ", quic_last)

    print("\n\n------------------- Analyzing TLS ------------------- ")
    for tls_msmt_pt in tls_iter_res:
        # for tls_msmt_pt in tls_data:
        ts_start = tls_msmt_pt[0]['ts-start']
        ts_end = tls_msmt_pt[0]['ts-end']
        b = tls_msmt_pt[0]['bytes']

        if int(b) == 0 and ts_end == ts_start:
            print("\n\nTLS has an initial timestamp / no data yet received")
            print("\nTLS init msmt point is: ", tls_msmt_pt)
            tls_init = tls_msmt_pt
            continue
        else:
            print("\nFound TLS first real data at index:",
                  tls_iter_res.index(tls_msmt_pt))
            # print("\n\nFound TLS first real data at index:", tls_data.index(tls_msmt_pt))
            print("\nTLS real msmt point is: ", tls_msmt_pt)
            tls_first = tls_msmt_pt
            break

    ### check the last timestamp ###
    tls_last = tls_iter_res[-1]
    # tls_last = tls_data[-1]

    print("\nTLS last msmt point is: ", tls_last)

    ### determine who sends first? ###
    print("\n\n------------------- Analyzing Offset ------------------- ")

    quic_ts_start = datetime.datetime.strptime(
        quic_first[0]['ts-start'], '%Y-%m-%dT%H:%M:%S.%f')

    tls_ts_start = datetime.datetime.strptime(
        tls_first[0]['ts-start'], '%Y-%m-%dT%H:%M:%S.%f')

    print("\nQUIC: ts_start (string): ", type(quic_first[0]['ts-start']))
    print("\nQUIC: quic_ts_start (else): ", type(quic_ts_start))

    if quic_ts_start < tls_ts_start:
        print("\n\nQUIC earlier than TLS")
        delta_t = (tls_ts_start - quic_ts_start).total_seconds()
        target_proto = "tls"
    else:
        print("\n\nQUIC identical or later than TLS")
        delta_t = (quic_ts_start - tls_ts_start).total_seconds()
        target_proto = "quic"

    return (target_proto, delta_t)


def plot_data_smoothing_total(quic, tls):
    ### zero == analyzing_rates[0]
    quic_zero_x_axis_conn1 = []
    quic_zero_y_axis_conn1 = []

    tls_zero_x_axis_conn1 = []
    tls_zero_y_axis_conn1 = []

    zero_xticks_list = []

    ### one == analyzing_rates[1]
    quic_one_x_axis_conn1 = []
    quic_one_y_axis_conn1 = []

    tls_one_x_axis_conn1 = []
    tls_one_y_axis_conn1 = []

    one_xticks_list = []

    ### two == analyzing_rates[0]
    quic_two_x_axis_conn1 = []
    quic_two_y_axis_conn1 = []

    tls_two_x_axis_conn1 = []
    tls_two_y_axis_conn1 = []

    two_xticks_list = []

    # NOTE: save_raw saves key as string, but the program saves it as int
    for rate in analyzing_rates:
        if rate == 500:
            # collect quic data
            quic_data = quic[rate]
            # debug print("\nQUIC 500 data is: ", quic_data)

            quic_zero_x_axis_conn1 = quic_data[0][0]
            quic_zero_y_axis_conn1 = quic_data[1][0]

            # print("\nQUIC 500 x axis data is: ", quic_zero_x_axis_conn1)
            # print("\nQUIC 500 y axis data is: ", quic_zero_y_axis_conn1)

            # collect tls data
            tls_data = tls[rate]
            # debug print("\nTLS 500 data is: ", tls_data)

            # split into x and y axis
            tls_zero_x_axis_conn1 = tls_data[0][0]
            tls_zero_y_axis_conn1 = tls_data[1][0]

            # print("\nTLS 500 x axis data is: ", tls_zero_x_axis_conn1)
            # print("\nTLS 500 y axis data is: ", tls_zero_y_axis_conn1)

            # determine largest x value
            quic_x_max = quic_zero_x_axis_conn1[-1]
            tls_x_max = tls_zero_x_axis_conn1[-1]

            print("\nquic x max: ", quic_x_max)
            print("\ntls x max: ", tls_x_max)

            if quic_x_max >= tls_x_max:
                last_x = quic_x_max
            else:
                last_x = tls_x_max

            current_x = 0

            zero_xticks_list.append(current_x)

            while current_x < last_x:
                current_x = current_x + 20
                zero_xticks_list.append(current_x)

            print("\n\n500 x ticks: ", zero_xticks_list)

        elif rate == 250:
            # collect quic data
            quic_data = quic[rate]
            print("\nQUIC 250 data is: ", quic_data)

            quic_one_x_axis_conn1 = quic_data[0][0]
            quic_one_y_axis_conn1 = quic_data[1][0]

            # print("\nQUIC 250 x axis data is: ", quic_one_x_axis_conn1)
            # print("\nQUIC 250 y axis data is: ", quic_one_y_axis_conn1)

            # collect tls data
            tls_data = tls[rate]
            print("\nTLS 250 data is: ", tls_data)

            # debug print("\nTLS 500 data is: ", tls_data)

            # split into x and y axis
            tls_one_x_axis_conn1 = tls_data[0][0]
            tls_one_y_axis_conn1 = tls_data[1][0]

            # print("\nTLS 250 x axis data is: ", tls_one_x_axis_conn1)
            # print("\nTLS 250 y axis data is: ", tls_one_y_axis_conn1)

            # determine largest x value
            quic_x_max = quic_one_x_axis_conn1[-1]
            tls_x_max = tls_one_x_axis_conn1[-1]

            print("\nquic x max: ", quic_x_max)
            print("\ntls x max: ", tls_x_max)

            if quic_x_max >= tls_x_max:
                last_x = quic_x_max
            else:
                last_x = tls_x_max

            current_x = 0

            one_xticks_list.append(current_x)

            while current_x < last_x:
                current_x = current_x + 20
                one_xticks_list.append(current_x)

            print("\n\n250 x ticks: ", one_xticks_list)

        elif rate == 50:
            # collect quic data
            quic_data = quic[rate]
            print("\nQUIC 50 data is: ", quic_data)

            # debug print("\nQUIC 500 data is: ", quic_data)

            quic_two_x_axis_conn1 = quic_data[0][0]
            quic_two_y_axis_conn1 = quic_data[1][0]

            # print("\nQUIC 50 x axis data is: ", quic_two_x_axis_conn1)
            # print("\nQUIC 50 y axis data is: ", quic_two_y_axis_conn1)

            # collect tls data
            tls_data = tls[rate]
            print("\nTLS 50 data is: ", tls_data)

            # debug print("\nTLS 500 data is: ", tls_data)

            # split into x and y axis
            tls_two_x_axis_conn1 = tls_data[0][0]
            tls_two_y_axis_conn1 = tls_data[1][0]

            # print("\nTLS 50 x axis data is: ", tls_two_x_axis_conn1)
            # print("\nTLS 50 y axis data is: ", tls_two_y_axis_conn1)

            # determine largest x value
            quic_x_max = quic_two_x_axis_conn1[-1]
            tls_x_max = tls_two_x_axis_conn1[-1]

            print("\nquic x max: ", quic_x_max)
            print("\ntls x max: ", tls_x_max)

            if quic_x_max >= tls_x_max:
                last_x = quic_x_max
            else:
                last_x = tls_x_max

            current_x = 0

            two_xticks_list.append(current_x)

            while current_x < last_x:
                current_x = current_x + 20
                two_xticks_list.append(current_x)

            print("\n\n50 x ticks: ", two_xticks_list)
        else:
            raise Exception("Rate not supported!")

    # first plot
    fig = plt.figure(figsize=(11, 9))

    ay1 = plt.subplot(411)

    plt.plot(quic_zero_x_axis_conn1, quic_zero_y_axis_conn1,
             color='#ff7f00', label="QUIC")
    plt.plot(tls_zero_x_axis_conn1, tls_zero_y_axis_conn1,
             color='#4daf4a', label="TCPTLS")

    plt.ylabel('Goodput/rate [%]')
    plt.xlabel('time [s]', labelpad=0)
    plt.xticks(zero_xticks_list)
    plt.yticks(yticks_list)

    plt.legend()

    # we dont need that plt.gca().invert_xaxis()
    plt.grid(color='darkgray', linestyle=':')
    plt.title('Rate: {} KBit/s'.format(500))

    # second plot
    plt.subplot(412)

    plt.plot(quic_one_x_axis_conn1, quic_one_y_axis_conn1,
             color='#ff7f00', label="QUIC")
    plt.plot(tls_one_x_axis_conn1, tls_one_y_axis_conn1,
             color='#4daf4a', label="TCPTLS")

    plt.ylabel('Goodput/rate [%]')
    plt.xlabel('time [s]', labelpad=0)
    plt.xticks(one_xticks_list)
    plt.yticks(yticks_list)

    plt.legend()

    # we dont need that plt.gca().invert_xaxis()
    plt.grid(color='darkgray', linestyle=':')
    plt.title('Rate: {} KBit/s'.format(250))

    # third plot
    plt.subplot(413)

    plt.plot(quic_two_x_axis_conn1, quic_two_y_axis_conn1,
             color='#ff7f00', label="QUIC")
    plt.plot(tls_two_x_axis_conn1, tls_two_y_axis_conn1,
             color='#4daf4a', label="TCPTLS")

    plt.ylabel('Goodput/rate [%]')
    plt.xlabel('time [s]', labelpad=0)
    plt.xticks(two_xticks_list)
    plt.yticks(yticks_list)

    plt.legend()

    # we dont need that plt.gca().invert_xaxis()
    plt.grid(color='darkgray', linestyle=':')
    plt.title('Rate: {} KBit/s'.format(50))

    plt.subplots_adjust(hspace=0.5)
    msmt_name = os.path.basename(__file__)[:-3]
    result_file = shared.prepare_result(msmt_name)
    # fig.suptitle(r'Rate limitation: Critical threshold analysis \n (Steps = 4, Iterations = 4, $\alpha_i > \beta_i$)', fontsize=14)
    # fig.suptitle("Measurement module: Loss analysis\n {}".format(r'(Rate steps = 4, Loss steps = 4,  Iterations = 4, $t_{deadline} = 60s$)'), fontsize=14)
    fig.suptitle(
        "Inter-Protocol-Fairness: 1 QUIC connection vs 1 TCP/TLS connection\n")

    fig.savefig(result_file, bbox_inches='tight')


#analyzing_rates = [500]
def plot_data_smoothing_total_early(quic, tls):
    ### zero == analyzing_rates[0]
    quic_zero_x_axis_conn1 = []
    quic_zero_y_axis_conn1 = []

    tls_zero_x_axis_conn1 = []
    tls_zero_y_axis_conn1 = []

    zero_xticks_list = []

    for rate in analyzing_rates:
        if rate == 500:
            # collect quic data
            quic_data = quic[rate]
            # debug print("\nQUIC 500 data is: ", quic_data)

            quic_zero_x_axis_conn1 = quic_data[0][0]
            quic_zero_y_axis_conn1 = quic_data[1][0]

            print("\nQUIC 500 x axis data is: ", quic_zero_x_axis_conn1)
            print("\nQUIC 500 y axis data is: ", quic_zero_y_axis_conn1)

            # collect tls data
            tls_data = tls[rate]
            # debug print("\nTLS 500 data is: ", tls_data)

            # split into x and y axis
            tls_zero_x_axis_conn1 = tls_data[0][0]
            tls_zero_y_axis_conn1 = tls_data[1][0]

            print("\nTLS 500 x axis data is: ", tls_zero_x_axis_conn1)
            print("\nTLS 500 y axis data is: ", tls_zero_y_axis_conn1)

            # determine largest x value
            quic_x_max = quic_zero_x_axis_conn1[-1]
            tls_x_max = tls_zero_x_axis_conn1[-1]

            print("\nquic x max: ", quic_x_max)
            print("\ntls x max: ", tls_x_max)

            if quic_x_max >= tls_x_max:
                last_x = quic_x_max
            else:
                last_x = tls_x_max

            current_x = 0

            zero_xticks_list.append(current_x)

            while current_x < last_x:
                current_x = current_x + 20
                zero_xticks_list.append(current_x)

            print("\n\n500 x ticks: ", zero_xticks_list)

        elif rate == 250:
            pass
        elif rate == 50:
            pass
        else:
            raise Exception("Rate not supported!")

    # first plot
    fig = plt.figure(figsize=(11, 9))
    ay1 = plt.subplot(411)

    plt.plot(quic_zero_x_axis_conn1, quic_zero_y_axis_conn1,
             color='#ff7f00', label="QUIC")
    plt.plot(tls_zero_x_axis_conn1, tls_zero_y_axis_conn1,
             color='#4daf4a', label="TCPTLS")

    plt.ylabel('Goodput/rate [%]')
    plt.xlabel('time [s]', labelpad=0)
    plt.xticks(zero_xticks_list)
    plt.yticks(yticks_list)

    plt.legend()

    # we dont need that plt.gca().invert_xaxis()
    plt.grid(color='darkgray', linestyle=':')
    plt.title('Rate: {} KBit/s'.format(500))

    # second plot

    # third plot

    plt.subplots_adjust(hspace=0.5)
    msmt_name = os.path.basename(__file__)[:-3]
    result_file = shared.prepare_result(msmt_name)
    # fig.suptitle(r'Rate limitation: Critical threshold analysis \n (Steps = 4, Iterations = 4, $\alpha_i > \beta_i$)', fontsize=14)
    # fig.suptitle("Measurement module: Loss analysis\n {}".format(r'(Rate steps = 4, Loss steps = 4,  Iterations = 4, $t_{deadline} = 60s$)'), fontsize=14)
    fig.suptitle(
        "Inter-Protocol-Fairness: 1 QUIC connection vs 1 TCP/TLS connection\n")

    fig.savefig(result_file, bbox_inches='tight')


def plot_data_smoothing_iter(quic_data, tls_data, offset, iteration):

    # QUIC
    quic_x_axis_conn1 = quic_data[0][0]
    quic_y_axis_conn1 = quic_data[1][0]

    # TLS
    tls_x_axis_conn1 = tls_data[0][0]
    tls_y_axis_conn1 = tls_data[1][0]

    # ok we must change a axis accordingly to offset
    if offset[0] == "quic":
        # we accept only integer ticks
        delta_t = int(round(offset[1]))
        # debug print("\nQuic offset: ", delta_t)

        # sweep through quic_x_axis and add offset
        # debug print("\n quic x: ", quic_x_axis_conn1)

        # we need an independeten counter c
        c = 0

        while c < len(quic_x_axis_conn1):
            new_quic_x_item = quic_x_axis_conn1[c] + delta_t

            # print("\n old tls:", tls_x_axis_conn1[c])
            quic_x_axis_conn1[c] = new_quic_x_item

            # print("\n new tls:", tls_x_axis_conn1[c])
            c += 1

        # sweep through tls_x_axis and add offset
        # debug print("\n new quic x: ", quic_x_axis_conn1)

    elif offset[0] == "tls":
        # we accept only integer ticks
        delta_t = int(round(offset[1]))
        # debug print("\ntls offset: ", delta_t)

        # sweep through tls_x_axis and add offset
        # debug print("\n tls x: ", tls_x_axis_conn1)

        # we need an independeten counter c
        c = 0

        while c < len(tls_x_axis_conn1):
            new_tls_x_item = tls_x_axis_conn1[c] + delta_t

            # print("\n old tls:", tls_x_axis_conn1[c])
            tls_x_axis_conn1[c] = new_tls_x_item

            # print("\n new tls:", tls_x_axis_conn1[c])
            c += 1

        # sweep through tls_x_axis and add offset
        # debug print("\n new tls x: ", tls_x_axis_conn1)

    else:
        raise Exception("Offset only supports TLS or QUIC!")

    # determine last x value
    xticks_list = []

    quic_last_x_conn1 = quic_x_axis_conn1[-1]
    tls_last_x_conn1 = tls_x_axis_conn1[-1]

    if quic_last_x_conn1 >= tls_last_x_conn1:
        last_x = quic_last_x_conn1
    else:
        last_x = tls_last_x_conn1

    current_x = 0
    xticks_list.append(current_x)

    while current_x < last_x:
        current_x = current_x + 20
        xticks_list.append(current_x)

    # debug print("x-axis is: ", xticks_list)
    # debug print("\ny axis 1 normalized: ", quic_y_axis_conn1)
    # debug print("\ny axis 2 normalized: ", tls_y_axis_conn1)

    # first plot
    fig = plt.figure(figsize=(11, 9))
    # debug ay1 = plt.subplot(411)
    ay1 = plt.subplot(411)

    # here shoudl go the fourth rate

    plt.plot(quic_x_axis_conn1, quic_y_axis_conn1, marker='v',
             markersize=4, color='#ff7f00', label="QUIC")
    plt.plot(tls_x_axis_conn1, tls_y_axis_conn1, marker='v',
             markersize=4, color='#4daf4a', label="TCPTLS")

    plt.ylabel('Goodput/rate [%]')
    plt.xlabel('time [s]', labelpad=0)
    plt.xticks(xticks_list)
    plt.yticks(yticks_list)

    plt.legend()

    # we dont need that plt.gca().invert_xaxis()
    plt.grid(color='darkgray', linestyle=':')
    plt.title('Rate: {} KBit/s'.format(500))

    # debug plt.subplots_adjust(hspace = 0.5)
    plt.subplots_adjust(hspace=0.5)
    result_file = shared.prepare_result(
        os.path.basename(__file__)[:-3] + str(iteration))
    fig.suptitle("Measurement campaign: Inter-protocol fairness\n")

    fig.savefig(result_file, bbox_inches='tight')


def analyze_data_smoothing(msmt_results):
    '''
    debug 
    data_pts = [[{'ts-end': '2019-05-09T06:51:24.476176', 'bytes': '54422', 'ts-start': '2019-05-09T06:51:23.537077'}], [{'ts-end': '2019-05-09T06:51:25.470363', 'bytes': '110600', 'ts-start': '2019-05-09T06:51:23.537077'}], [{'ts-end': '2019-05-09T06:51:26.480288', 'bytes': '167822', 'ts-start': '2019-05-09T06:51:23.537077'}], [{'ts-end': '2019-05-09T06:51:27.473140', 'bytes': '224000', 'ts-start': '2019-05-09T06:51:23.537077'}], [{'ts-end': '2019-05-09T06:51:28.483312', 'bytes': '281222', 'ts-start': '2019-05-09T06:51:23.537077'}], [{'ts-end': '2019-05-09T06:51:29.476473', 'bytes': '337400', 'ts-start': '2019-05-09T06:51:23.537077'}], [{'ts-end': '2019-05-09T06:51:30.490403', 'bytes': '394800', 'ts-start': '2019-05-09T06:51:23.537077'}]]
    data_pts = [[{'ts-end': '2019-05-10T09:19:25.912457', 'bytes': '46022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:26.008021', 'bytes': '4200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:27.021265', 'bytes': '61600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:26.743648', 'bytes': '46022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:28.013900', 'bytes': '116200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:26.743648', 'bytes': '46022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:28.060332', 'bytes': '118822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:29.025086', 'bytes': '99400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:30.014301', 'bytes': '156800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:29.738945', 'bytes': '117422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:30.826598', 'bytes': '202822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:31.028181', 'bytes': '128800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:30.826598', 'bytes': '202822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:32.017318', 'bytes': '184800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:33.029703', 'bytes': '238000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:33.001123', 'bytes': '207022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:34.019409', 'bytes': '294000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:33.001123', 'bytes': '207022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:34.634644', 'bytes': '328822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:35.035314', 'bytes': '229600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:34.634644', 'bytes': '328822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:36.023820', 'bytes': '285600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:37.039102', 'bytes': '334600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:36.936457', 'bytes': '337222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:38.027164', 'bytes': '386400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:37.899818', 'bytes': '341422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:39.042893', 'bytes': '443800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:37.899818', 'bytes': '341422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:39.730900', 'bytes': '482822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:40.030635', 'bytes': '358400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:39.730900', 'bytes': '482822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:41.043682', 'bytes': '415800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:39.730900', 'bytes': '482822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:42.052499', 'bytes': '473022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:39.730900', 'bytes': '482822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:43.044508', 'bytes': '529200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:44.057125', 'bytes': '533400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:43.163872', 'bytes': '536022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:45.046411', 'bytes': '582400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:44.621846', 'bytes': '543022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:46.059096', 'bytes': '639800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:44.621846', 'bytes': '543022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:47.047171', 'bytes': '695800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:44.621846', 'bytes': '543022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:47.364829', 'bytes': '713822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:48.061102', 'bytes': '582400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:47.364829', 'bytes': '713822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:49.050371', 'bytes': '638400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:47.364829', 'bytes': '713822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:50.063153', 'bytes': '695800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:47.364829', 'bytes': '713822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:51.051225', 'bytes': '751800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:47.364829', 'bytes': '713822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:52.064084', 'bytes': '809200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:53.052099', 'bytes': '744800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:52.505353', 'bytes': '834222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:54.065962', 'bytes': '802200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:52.505353', 'bytes': '834222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:55.074640', 'bytes': '848222', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:54.704653', 'bytes': '845422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:56.067875', 'bytes': '904400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:54.704653', 'bytes': '845422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:57.077568', 'bytes': '961622', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:54.704653', 'bytes': '845422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:58.070698', 'bytes': '1017800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:54.704653', 'bytes': '845422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:58.811969', 'bytes': '1059800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:19:59.062724', 'bytes': '859600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:58.811969', 'bytes': '1059800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:00.075399', 'bytes': '917000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:58.811969', 'bytes': '1059800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:01.084594', 'bytes': '974222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:58.811969', 'bytes': '1059800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:02.077864', 'bytes': '1030400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:58.811969', 'bytes': '1059800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:03.086344', 'bytes': '1087622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:58.811969', 'bytes': '1059800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:04.078635', 'bytes': '1143800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:19:58.811969', 'bytes': '1059800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:05.088569', 'bytes': '1201022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:06.077843', 'bytes': '1066800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:05.954223', 'bytes': '1250022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:07.090307', 'bytes': '1124200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:05.954223', 'bytes': '1250022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:08.079800', 'bytes': '1180200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:05.954223', 'bytes': '1250022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:08.965196', 'bytes': '1230422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:09.092537', 'bytes': '1257200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:10.080556', 'bytes': '1276800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:09.261236', 'bytes': '1266822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:11.093001', 'bytes': '1334200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:09.261236', 'bytes': '1266822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:12.103335', 'bytes': '1391422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:09.261236', 'bytes': '1266822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:13.095295', 'bytes': '1447600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:09.261236', 'bytes': '1266822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:14.105154', 'bytes': '1504822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:09.261236', 'bytes': '1266822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.097352', 'bytes': '1561000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:09.261236', 'bytes': '1266822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:16.111107', 'bytes': '1306200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:17.098209', 'bytes': '1362200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:18.110992', 'bytes': '1419600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:19.098787', 'bytes': '1475600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:20.111526', 'bytes': '1533000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:21.100896', 'bytes': '1589000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:22.113999', 'bytes': '1646400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:23.122571', 'bytes': '1703622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:24.113671', 'bytes': '1759800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:25.123760', 'bytes': '1817022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:15.415353', 'bytes': '1579022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:26.115867', 'bytes': '1873200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:27.128608', 'bytes': '1635200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:26.136567', 'bytes': '1874422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:28.116721', 'bytes': '1691200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:26.136567', 'bytes': '1874422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:29.130655', 'bytes': '1748600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:26.136567', 'bytes': '1874422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:30.119973', 'bytes': '1804600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:26.136567', 'bytes': '1874422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:31.132527', 'bytes': '1836800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:31.102905', 'bytes': '1899622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:32.122079', 'bytes': '1892800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:31.102905', 'bytes': '1899622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:33.134859', 'bytes': '1950200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:31.102905', 'bytes': '1899622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:34.124133', 'bytes': '2006200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:31.102905', 'bytes': '1899622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:35.136924', 'bytes': '2063600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:31.102905', 'bytes': '1899622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:35.627605', 'bytes': '2091422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:36.133645', 'bytes': '1927800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:35.627605', 'bytes': '2091422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:37.148263', 'bytes': '1985200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:35.627605', 'bytes': '2091422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.136252', 'bytes': '2041200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:39.148340', 'bytes': '2143400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:40.135738', 'bytes': '2199400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:41.147274', 'bytes': '2256800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:42.154925', 'bytes': '2314022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:43.145411', 'bytes': '2349200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:44.157219', 'bytes': '2406600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:45.144073', 'bytes': '2462600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:46.160844', 'bytes': '2484822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:47.154235', 'bytes': '2541000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:48.163039', 'bytes': '2598222', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:49.156242', 'bytes': '2654400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:50.169988', 'bytes': '2711800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:38.181903', 'bytes': '2043822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:50.663358', 'bytes': '2739800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:51.161041', 'bytes': '2072000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:50.663358', 'bytes': '2739800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:52.172578', 'bytes': '2129400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:50.663358', 'bytes': '2739800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:53.159454', 'bytes': '2185400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:50.663358', 'bytes': '2739800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:54.170994', 'bytes': '2242800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:54.931897', 'bytes': '2742422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:55.178634', 'bytes': '2297400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:54.931897', 'bytes': '2742422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:56.165231', 'bytes': '2353400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:54.931897', 'bytes': '2742422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:57.178089', 'bytes': '2410800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:58.167511', 'bytes': '2776200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:57.941482', 'bytes': '2433022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:20:59.181439', 'bytes': '2833600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:57.941482', 'bytes': '2433022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:00.170436', 'bytes': '2889600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:57.941482', 'bytes': '2433022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:01.183452', 'bytes': '2947000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:20:57.941482', 'bytes': '2433022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:02.173700', 'bytes': '2968000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:01.997136', 'bytes': '2468022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:03.190341', 'bytes': '3025400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:01.997136', 'bytes': '2468022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:04.182125', 'bytes': '3081400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:01.997136', 'bytes': '2468022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:05.194521', 'bytes': '3138622', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:01.997136', 'bytes': '2468022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:06.187710', 'bytes': '3194800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:01.997136', 'bytes': '2468022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:07.200498', 'bytes': '3252200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:01.997136', 'bytes': '2468022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:08.189762', 'bytes': '3308200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:01.997136', 'bytes': '2468022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:09.198556', 'bytes': '3365422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:09.202503', 'bytes': '2468200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:09.198556', 'bytes': '3365422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:10.186686', 'bytes': '2580200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:09.198556', 'bytes': '3365422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:11.199283', 'bytes': '2637600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:09.198556', 'bytes': '3365422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:12.208176', 'bytes': '2694822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:09.198556', 'bytes': '3365422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:13.200637', 'bytes': '2751000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:09.198556', 'bytes': '3365422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:14.209515', 'bytes': '2808222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:14.802719', 'bytes': '3369622', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:15.201619', 'bytes': '2860200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:14.802719', 'bytes': '3369622', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:16.215718', 'bytes': '2917600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:17.205285', 'bytes': '3369800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:17.201332', 'bytes': '2973422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:18.218010', 'bytes': '3407600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:18.094716', 'bytes': '2993022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:19.206086', 'bytes': '3463600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:18.094716', 'bytes': '2993022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:20.220014', 'bytes': '3521000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:18.094716', 'bytes': '2993022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:21.208088', 'bytes': '3577000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:18.094716', 'bytes': '2993022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:22.223265', 'bytes': '3634400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:18.094716', 'bytes': '2993022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:23.211339', 'bytes': '3690400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:18.094716', 'bytes': '2993022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:24.225321', 'bytes': '3694600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:25.213345', 'bytes': '3750600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:26.227052', 'bytes': '3808000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:27.215397', 'bytes': '3864000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:28.228132', 'bytes': '3921400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:29.237888', 'bytes': '3978622', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:30.230138', 'bytes': '4034800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:31.238951', 'bytes': '4092022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:32.232142', 'bytes': '4148200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:33.244882', 'bytes': '4205600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.234149', 'bytes': '4261600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:24.196671', 'bytes': '3046222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:35.248281', 'bytes': '3095222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:36.240449', 'bytes': '3151400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:37.250791', 'bytes': '3208622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:38.242904', 'bytes': '3264800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:39.254164', 'bytes': '3322200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:40.242451', 'bytes': '3378200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:41.255371', 'bytes': '3435600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:42.243820', 'bytes': '3491600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:43.256740', 'bytes': '3549000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:44.247036', 'bytes': '3605000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:45.260548', 'bytes': '3662400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.268141', 'bytes': '3719622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:21:34.382212', 'bytes': '4270000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:08.299230', 'bytes': '4323200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:09.287465', 'bytes': '4367822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:09.681905', 'bytes': '4379022', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.310549', 'bytes': '4926422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:21:46.789507', 'bytes': '3749022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:12.303861', 'bytes': '3774400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:13.314045', 'bytes': '4566622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:14.305815', 'bytes': '4622800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:15.314833', 'bytes': '4680022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:16.307734', 'bytes': '4736200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:17.320788', 'bytes': '4793600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:18.308753', 'bytes': '4849600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:19.322641', 'bytes': '4907000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:20.310660', 'bytes': '4963000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:21.323100', 'bytes': '5020400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:22.316109', 'bytes': '5076400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:11.805057', 'bytes': '4954422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:23.328357', 'bytes': '5133622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:24.324005', 'bytes': '4971400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:24.022643', 'bytes': '5172822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:25.334383', 'bytes': '5028622', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:24.022643', 'bytes': '5172822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:26.327809', 'bytes': '5084800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:24.022643', 'bytes': '5172822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:27.318627', 'bytes': '5140800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:24.022643', 'bytes': '5172822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:28.331612', 'bytes': '5198200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:24.022643', 'bytes': '5172822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:29.340341', 'bytes': '5255422', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:24.022643', 'bytes': '5172822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:30.334059', 'bytes': '5311600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:24.022643', 'bytes': '5172822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:31.343054', 'bytes': '5368822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:24.022643', 'bytes': '5172822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:32.336514', 'bytes': '5425000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:24.022643', 'bytes': '5172822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:33.347877', 'bytes': '5181222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:34.340170', 'bytes': '5237400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:35.348920', 'bytes': '5294622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:36.340591', 'bytes': '5350800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:37.353552', 'bytes': '5408200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:38.341661', 'bytes': '5464200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:39.354312', 'bytes': '5521600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:40.342342', 'bytes': '5577600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:41.356217', 'bytes': '5635000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:42.344301', 'bytes': '5691000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:43.356984', 'bytes': '5748400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:44.365847', 'bytes': '5805622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:45.359034', 'bytes': '5861800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:46.369127', 'bytes': '5919022', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:47.361083', 'bytes': '5975200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:33.200160', 'bytes': '5473822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:48.369935', 'bytes': '6032422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:49.361945', 'bytes': '5478200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:50.375525', 'bytes': '5535600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:51.365100', 'bytes': '5591600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:52.378577', 'bytes': '5649000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:53.368848', 'bytes': '5705000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.381457', 'bytes': '5762400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:22:49.282780', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:11.398925', 'bytes': '6132000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:12.410559', 'bytes': '6189400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:13.397381', 'bytes': '6245400', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:14.409935', 'bytes': '6302800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:15.397091', 'bytes': '6358800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:16.409984', 'bytes': '6416200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:17.417574', 'bytes': '6473422', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:18.409766', 'bytes': '6529600', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:19.418684', 'bytes': '7282622', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:22:54.724290', 'bytes': '5781822', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:20.410843', 'bytes': '7338800', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:21.423509', 'bytes': '5800200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:21.099048', 'bytes': '7377822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:22.410595', 'bytes': '5856200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:21.099048', 'bytes': '7377822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:23.422131', 'bytes': '5913600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:21.099048', 'bytes': '7377822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:24.409006', 'bytes': '5969600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:21.099048', 'bytes': '7377822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:25.420266', 'bytes': '6027000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:21.099048', 'bytes': '7377822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:26.428256', 'bytes': '6084222', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:21.099048', 'bytes': '7377822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:27.418957', 'bytes': '6140400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:21.099048', 'bytes': '7377822', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:28.263160', 'bytes': '6161400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:28.433287', 'bytes': '7414222', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:29.055344', 'bytes': '6165600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:29.426800', 'bytes': '7466200', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:30.426159', 'bytes': '6188000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:31.418469', 'bytes': '6244000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:32.432800', 'bytes': '6501600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:33.422522', 'bytes': '6556200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:34.435455', 'bytes': '6613600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:35.425123', 'bytes': '6669600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:36.438042', 'bytes': '6727000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:37.446874', 'bytes': '6784222', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:38.440665', 'bytes': '6840400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:39.430389', 'bytes': '6896400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:40.444717', 'bytes': '6953800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:41.434483', 'bytes': '7009800', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:42.451624', 'bytes': '7067200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:43.441105', 'bytes': '7123200', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:44.454369', 'bytes': '7180600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:45.442687', 'bytes': '7236600', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:46.457114', 'bytes': '7294000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:47.445396', 'bytes': '7350000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:48.460520', 'bytes': '7407400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:49.449488', 'bytes': '7463400', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:50.096447', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}], [{'ts-end': '2019-05-10T09:23:50.096447', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.123548'}, {'ts-end': '2019-05-10T09:23:30.097290', 'bytes': '7500000', 'ts-start': '2019-05-10T09:19:25.954645'}]]
    '''

    # TODO: Sloppy
    data_pts = msmt_results

    # x axis is time, y axis is ratio
    x_axis = []
    y_axis = []

    for data in data_pts:
        # ok endtimestamps
        end_conn = data[0]['ts-end']
        start_conn = data[0]['ts-start']
        byte_conn = data[0]['bytes']

        time_end_conn = datetime.datetime.strptime(
            end_conn, '%Y-%m-%dT%H:%M:%S.%f')
        time_start_conn = datetime.datetime.strptime(
            start_conn, '%Y-%m-%dT%H:%M:%S.%f')

        measurement_length_conn = (
            time_end_conn - time_start_conn).total_seconds()

        # debug print("msmt length conn is: ", measurement_length_conn)
        # debug print("bytes conn are: ", byte_conn)

        # ensure timestamps are not identical: would result in msmt_length = 0 => division by zero
        # this does not prevent multiple timestamps resulting same msmt_length
        if measurement_length_conn > 0.0:
            bw_conn = ((int(byte_conn) * 8) / 10**3) / measurement_length_conn
            # debug print("bw conn are: ", bw_conn)
            y_axis.append(int(bw_conn))
            x_axis.append(int(round(measurement_length_conn)))

    # debug print("\n\nconn x axis: ", x_axis)
    # debug print("\nconn y axis: ", y_axis)

    iteration_result = []
    iteration_xaxis_result = []
    iteration_yaxis_result = []
    iteration_xaxis_result.append(x_axis)
    iteration_yaxis_result.append(y_axis)
    iteration_result.append(iteration_xaxis_result)
    iteration_result.append(iteration_yaxis_result)
    # debug print("\n\niteration result: ", iteration_result)
    return iteration_result


def main(ctx):
    # this is event loop
    loop = asyncio.get_event_loop()

    # schedule coroutine to run on event loop
    loop.run_until_complete(asyncio.ensure_future(run_test(ctx)))
